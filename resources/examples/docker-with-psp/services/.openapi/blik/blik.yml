openapi: 3.0.0
servers:
  - url: https://sandbox.przelewy24.pl
    description: Sandbox server (uses test data)
  - url: https://secure.przelewy24.pl
    description: Production server (uses live data)
info:
  x-logo:
    url: "get.php?file=p24-logo_mini.png"
    altText: LogoP24
  contact:
    name: Support Przelewy24
    email: partner@przelewy24.pl
  title: Przelewy24 REST API Documentation
  description: >



    # Payment system


    Przelewy24 provides an authorisation and clearing system and provides payment services as a Domestic Payment Institution. <br/> <br/>

    Through Przelewy24 API you can access all of the services offered by the system. Below documentation includes most common used functionalities. Contact the [Sales Department](https://www.przelewy24.pl/pomoc/formularz-kontaktowy) to find out more. <br/><br/>

    In order to be able to access Przelewy24 API, you first need to [create an account](https://panel.przelewy24.pl/rejestracja.php) in the P24 Administration Panel.

    After registration, among others, the merchant may use the administration panel to keep track of the account balance, all payments made by their clients and refunds. <br/>




    ## Transaction process

    After placing the order, customer clicks the **"pay"** button. Merchant system sends a <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>register transaction</b></a> request to the P24 system and receives a unique TOKEN. Afterwards customer will be redirected to the P24 transaction panel.


    In case of payment cancellation, the customer is redirected to the **“urlReturn"** address.


    Upon successful completion of the transaction, the customer is redirected to the  <b>"urlReturn"</b> address. P24 sends the <a href="#tag/Notification"><b>transaction notification</b></a> to the  <b>"urlStatus"</b> address. The transaction notification is sent **asynchronously**.


    To verify the credibility of the received confirmation, the Merchant’s system sends a return request to P24 as a <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1verify/put"><b>transaction verification.</b></a>

    <br></br>
    <img src="get.php?file=eng_payment_process.png" alt="Payment process" class="center smallImg">


    ## Transaction requirement

    In order to carry out the transaction correctly, merchant’s website should offer transaction registering as well as handling transaction result.<br><br>
    The entire process is fully automatic and does not require any interference of the shop personnel in it.<br><br>
    After the payment process has been completed successfully, status of the order on the merchant website should automatically change to paid/accepted. At this point, merchant may proceed with order fulfilment.

    <br></br>

    <img src="get.php?file=eng_transaction_process.png" alt="Environment" class="center smallImg">

    # Definitions

    **CVV** – card verification value/code.


    **Cyclic Redundancy Check (CRC)** – unique key (String) obtained from Przelewy24 used to generate the checksum of the parameters sent.


    **Dynamic Currency Conversion (DCC)** – process whereby the amount of card transaction is converted to the currency of the payment card’s country of issue at the point of sale.


    **Merchant** – an institution or a private person using Przelewy24 services.


    **Session ID** – unique ID used to identify single transaction in merchant system.

    # Use cases

    ## How to display a full selection of payment methods in your shop?

    In order to facilitate the process of payment, it is possible to move the customer's selection of payment method to the very stage of placing an order. If the customer additionally accepts the terms and conditions of Przelewy24 (in the request, you need to set <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>regulationAccept = true</b></a>), they would be redirected from the shop's website directly to the bank or to the form for card payments, after clicking "pay". <br><br>

    In order to download the list of payment methods, you need to use the <a href="#tag/Additional-API-functionality/paths/~1api~1v1~1payment~1methods~1{lang}?amount=150&currency=PLN/get"><b>PaymentMethods</b></a> method, described in the Additional Services.


    <img src="get.php?file=ENG_WHITE_LABEL_1_14.png" alt="Payment Methods" class="center smallImg"><br>


    The list may be presented on your website in any form.

    ## How to redirect a customer to specific method of payment?

    In order to redirect the customer directly to selected method of payment, an identifier of a given method must be sent in the <b>method</b> field in transaction request. For instance, when redirecting to the mTransfer method, the request looks as follows:

    ```json
        {
          "merchantId": {{merchantId}},
          "posId": {{posId}},
          "sessionId": "{{sessionId}}",
          "amount": {{amount}},
          "currency": "{{currency}}",
          "description": "{{description}}",
          "email": "{{email}}",
          "country": "PL",
          "language": "pl",
          "method": {{method}},
          "urlReturn": "{{urlReturn}}",
          "sign": "{{sign}}",
        }
    ```

    ## How to limit the time allowed for finalise the payment by a customer?

    Depending on specific character of a given system, it might be necessary to limit the time that customer has for completing their payment. This option is controlled by <b>timeLimit</b> parameter. Setting this parameter to 0 would switch off the timer. Entering values 1-99 sets the time limit in minutes.

    ## How to enable customer's return to the shop, so that they don't have to wait for synchronic payment confirmation?

    In case of some payment methods, especially e-transfers, payment is confirmed within couple of minutes after making it. The client may either wait for result of the transaction in the transaction service and be redirected back to the shop upon receiving confirmation (that way the shop would already get the payment notification), or the client may be immediately redirected to the shop, without waiting for the result of the transaction. The choice between these two variants is made by means of the transaction request parameter <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>waitForResult</b></a>. The latter option is enabled when the parameter is set on false, the former, when the parameter is set on true.

    ## How to process a refund to a customer?

    Processing refunds, like all services in Przelewy24, is fully automatic and done via webservices. Refunds are processed by means of <a href="#tag/Additional-API-functionality/paths/~1api~1v1~1transaction~1refund/post"><b>transaction/refund</b></a> method.<br><br>

    Multiple refund requests may be ordered, as long as the sum of refunds does not exceed the sum of the original transaction.


    ## Can a customer finalise a transaction process after the end of a session?

    If a customer discontinues payment process (e.g. after accessing the bank’s website), Przelewy24 system offers an option of sending an automatic e-mail with a link that allows to finalise the initiated payment process. If the customer use this option, the outcome will be no different than the outcome of a transaction finalised on-line.<br><br>

    To have this functionality enabled, please contact Partner Support: partner@przelewy24.pl, tel. +48 61 642 93 45


    # Graphic materials


    P24 logo and banners are available at:

    [https://www.przelewy24.pl/en/download?#materialy-graficzne](https://www.przelewy24.pl/en/download?#materialy-graficzne)


    # API guidelines

    Please follow the steps below to ensure your payments via Przelewy24 process smoothly.


    ## Verify your hosting configuration

    <b>We recommend using the operating system and PHP in the 64-bit version, due to greater computing capabilities and greater efficiency.</b>


    In order to verify the version of the operating system and PHP version, for example, the phpinfo code can be used


    <a href="https://www.php.net/manual/en/function.phpinfo.php#refsect1-function.phpinfo-examples" target="_blank">https://www.php.net/manual/en/function.phpinfo.php#refsect1-function.phpinfo-examples</a>


    ```php
        <?php
        // Show all information, defaults to INFO_ALL
          phpinfo();

        // Show just the module information.
        // phpinfo(8) yields identical results.
          phpinfo(INFO_MODULES);
        ?>
    ```

    Next, save the file as a PHP extension (.php) and access the path / URL where the file is hosted.
    

    The file thus created must be placed on your web hosting - the address of this file should not be shared with anyone.


    <b><font color = "#DB2053">REMEMBER!</font><br>Once verified, the placed file should be removed from the server.</b> 


    ## Limit ranges of type INT signed / unsigned

    Range INT signed = -2,147,483,648 to 2,147,483,647

    
    Range INT unsigned = 0 to 4294,967,295

    
    Range BIGINT singed = -9223372036854775808 to 9223372036854775807

    
    Range BIGINT unsigned = 0 to 18446744073709551615


    <b><font color = "#DB2053">REMEMBER!</font><br>If you are using OS or PHP version 32bit, your application code may interpret a value greater than (2147483647 - maximum INT signed value) as a float type - which may cause problems in payment processing.</b> 


    ```php
        $large_number = 2147483648;
        var_dump($large_number); // float(2147483648)
    ```


    <br><b>In this case, change the range to BIGINT to allow a value greater than the maximum value of the INT signed range.</b>


    ## Verifying the database

    If you are storing the order_id - order ID value from the Przelewy24 system in the database, please verify that the set column type will allow a value larger than the maximum INT signed = 2147483647.


    <br><b>If this is the case, please change the range to BIGINT, in order to allow a value greater than the maximum INT signed range value.</b>


    ## Casting the order_id parameter

    Check whether your application code will allow a value greater than the maximum value i.e. INT signed = 2147483647 to be written/read.


    <br><b>If this is the case, change the range to BIGINT to allow a value greater than the maximum value of the INT signed range.</b>

    ## Environments

    <h3>Production environment</h3>

    Every request is differentiated by its own unique request URL. This way P24 knows which API-function you want to access. Combined with the base URL for either the production- or test-environment, you will get the complete API-URL.


    Base URL production system:<br>
    https://secure.przelewy24.pl/api/v1


    Production transactions will be visible in the panel<br>
    https://panel.przelewy24.pl/index.php

    <h3> Test environment</h3>

    During implementation of the mechanisms in merchant’s system, it is recommended to use test environment. Test environment allows to reproduce system functionalities without making actual payments.<br><br>
    Test environment endpoint: <br>
    https://sandbox.przelewy24.pl/api/v1<br><br>

    Test transactions will be visible in the test panel<br>
    https://sandbox.przelewy24.pl/panel/index.php<br><br>


    <b><u>The testing environment cannot be used for production transactions.</u></b>



    ## IP server addresses

    We recommend script protection against suspicious calls using address filtering for incoming connections. IP server ranges for the P24 servers: <br><br>
    <font class = "right"><b>91.216.191.181 – 91.216.191.185, </b></font><br>
    <font class = "right"><b>5.252.202.255 , 5.252.202.254</b></font><br>


    ## Environment requirements

    Transport Layer Security - TLS 1.2 (minimum required)<br/><br/>

    https://wiki.mozilla.org/Security/Server_Side_TLS<br/>
    https://en.wikipedia.org/wiki/Transport_Layer_Security
    <br><br>

    OpenSSL 1.0.1<br/><br/> https://www.openssl.org/news/changelog.html#x31<br><br>

    cURL 7.34.0<br/><br/> https://curl.haxx.se/docs/manpage.html#--tlsv12

    # Authentication

    P24 supports the mechanism of Basic Authentication.

    <!-- Redoc-Inject: <security-definitions> -->

  version: 1.0.16
x-tagGroups:
  - name: Transaction service
    tags:
      - Transaction service API
      - Notification
  - name: Additional services
    tags:
      - Additional API functionality
      - RefundNotification
  - name: Card payment
    tags:
      - Card Description
      - Card API
      - Card Notification
  - name: BLIK
    tags:
      - BLIK Use Cases
      - BLIK API
      - BLIK Additional
      - Alias Update Notification
  - name: Google Pay
    tags:
      - GPay Description
      - GPay API
  - name: Apple Pay
    tags:
      - APay Description
      - APay API

paths:
   /api/v1/transaction/register:
    post:
      tags:
        - Transaction service API
      summary: Transaction registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionRequestBody1"
        description: Before sending the transaction request, transaction data must be saved
          in the merchant’s local database. In particular, the session ID and
          the transaction amount should be stored. <br><br><hr>
          <h3>Redirection to transaction panel</h3>
          URL address:https://secure.przelewy24.pl/trnRequest/{TOKEN}<br><br>
          where {TOKEN} was obtained upon transaction registration.<br>
          <hr><br>

          On transaction success the URL address transferred in  <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>"urlStatus"</b></a> parameter is used to send notification irrespective of whether the customer has been redirected to  <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>"urlReturn"</b></a> or not. The notification is sent only for correct payments. The system does not send information on invalid or failed payments. The notification is sent in the JSON format.<br><br>
          <a href="#tag/Notification"><font color = "red"><b>Show Transaction result JSON</b></font></a>

        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionRegistrationResponse"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
      security:
        - basicAuth: []
   /api/v1/transaction/verify:
    put:
      tags:
        - Transaction service API
      summary: Transaction verification
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionVerificationBody"
        description: After receiving notification, the merchant’s system should perform an
          additional action to confirm the payment and authenticate the
          notification. It is necessary to use transaction/verify method.<br><br>
          **Important!** Transaction will be confirmed only after verification process. In case the customer performs transaction and merchant does not verify performed transaction, amount will not be transferred to the merchant and settled. It will stay at the customer’s disposal as an advance payment.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionVerificationResponse"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
      security:
        - basicAuth: []


   /api/v1/testAccess:
    get:
      tags:
        - Additional API functionality
      summary: Test Access
      description: Test connection. REST uses  <a href="#section/Authentication"><b>"basicAuth"</b></a> authorisation standard, where login and password are, respectively, account ID in P24 and the API key obtained from the “My data” section (“API and configuration data” subsection).
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionTestAccess200"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
      security:
        - basicAuth: []
   /api/v1/payment/methods/{lang}?amount=150&currency=PLN:
    get:
      tags:
        - Additional API functionality
      summary: Payment Methods
      description: Method returns a list of payment methods.
      parameters:
        - name: lang
          in: path
          description: "A language code. One of these: pl , en"
          required: true
          schema:
            type: string
            enum:
              - pl
              - en
        - in: query
          name: amount
          schema:
            type: integer
          description: Value of the amount.<br>It gives the possibility of clarifying whether a given form of payment is available for a specific amount.
          required: false
        - in: query
          name: currency
          schema:
            type: string
            default: PLN
          description: Currency compatible with ISO, e.g. PLN
          required: false
      responses:
        "200":
          description: List of payment methods
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    description: List of methods
                    items:
                      $ref: "#/components/schemas/PaymentMethodsResponseMethod"
                  agreements:
                    type: array
                    description: List of agreements
                  responseCode:
                    type: string
                    default: ""
                type: object
        "403":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "404":
          description: Payment methods not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
      security:
        - basicAuth: []
   /api/v1/transaction/refund:
    post:
      tags:
        - Additional API functionality
      summary: Refund transaction
      description: Create refund for one or more transactions.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRefundJsonRequestBody'
        description: 'Parameter ''refunds'' may contain multiple refunds.'
        required: true
      responses:
        "201":
          description: 'Created. Parameter ''data'' contains all refunds.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRefund201'
        "400":
          description: 'Invalid input data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputDataRefund'
        "401":
          description: 'Not authorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "409":
          description: 'Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRefund409'
        "500":
          description: 'Unknown error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund500Response'
      security:
        - basicAuth: []
   /api/v1/transaction/registerOffline:
    post:
      description: This method allows you to register offline payments. To use the method, you must first register standard payment transaction with <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>register transaction</b></a> method.<br><br>Additionally, you can control which bank use for payment by using the method parameter.
      tags:
        - Additional API functionality
      summary: Register offline transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionRegisterOfflineRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TransactionRegisterOfflineRequest"
        description: Input parameters.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionRegistrationOffline200"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionRegistrationOffline409"
        "500":
          description: Undefined error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorCodeResponse"
      security:
        - basicAuth: []
   /api/v1/transaction/register/splitpayment:
    post:
      description: Split Payments are charged using previously registered token in a process analogous to  <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>transaction/register</b></a>. When registering the token, you must add the <b>splitPaymentDetails</b> object characteristic for this form of transaction execution.
      tags:
        - Additional API functionality
      summary: Split Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranstactionSplitPayment"
        description: Array
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionRegistrationResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
      security:
        - basicAuth: []
   '/api/v1/refund/by/orderId/{orderId}':
    get:
      tags:
        - Additional API functionality
      summary: Refund by OrderID
      description: Get refund details for given Order Id
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        -
          name: orderId
          in: path
          description: 'existing refund Order Id'
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: 'Request has been processed successful. Parameter ''data'' contains refund info.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRefundsInfoResponse'
        "401":
          description: 'Not authorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "404":
          description: 'Refund with given Order Id not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionNotFoundResponse'
        "500":
          description: 'Undefined error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCodeResponse'
      security:
        - basicAuth: []
   '/api/v1/transaction/by/sessionId/{sessionId}':
    get:
      tags:
        - Additional API functionality
      summary: Get transaction by sessionID
      description: Method returns transaction information by sessionId
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        -
          name: sessionId
          in: path
          description: 'Transaction ID assigned by Merchant'
          required: true
          type: string
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionBySessionIdSuccessResponse'
        "400":
          description: 'Invalid input data'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: 'Incorrect authentication'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "404":
          description: 'Transaction not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionNotFoundResponse'
      security:
        - basicAuth: []



   /api/v1/paymentMethod/blik/chargeByCode:
    post:
      tags:
        - BLIK API
      summary: 'BLIK charge by code'
      description: Allows to charge blik transaction with T6 code. Returns unique transaction Id.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecurringParams"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlikChargeByCodeResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "500":
          description: Undefined error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorCodeResponse"
      security:
        - basicAuth: []
   /api/v1/paymentMethod/blik/chargeByAlias:
    post:
      tags:
        - BLIK API
      summary: BLIK charge by Alias
      description: ChargeByAlias is a one click payment method. It allows to charge customer using a previously obtained alias (**getAliasesByEmail**). Alias obtained must be provided in <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>methodRefId</b></a> parameter during transaction registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlikOneClick"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlikChargeByCodeResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "409":
          description: AlternativeKeys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargeByAlias409"
        "500":
          description: Undefined error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorCodeResponse"
      security:
        - basicAuth: []
   /api/v1/paymentMethod/blik/getAliasesByEmail/{email}:
    get:
      tags:
        - BLIK API
      summary: Getting Aliases ByEmail
      description: In order to receive an alias for subsequent payments, call the
                    <b>"getAliasesByEmail" </b>method.<br><br>
                    The method returns a list of aliases (along with the type and status) created for a given email address
                    in the scope of a given merchant.<br><br>
      parameters:
        - name: email
          in: path
          description: For aliases registered by email address
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction200Blik"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "404":
          description: 'Alias not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionNotFoundResponse'
      security:
        - basicAuth: []
   /api/v1/paymentMethod/blik/getAliasesByEmail/{email}/custom:
    get:
      tags:
        - BLIK API
      summary: Getting Aliases ByEmail (Custom)
      description: In order to receive an alias for subsequent payments, call the
                    <b>"getAliasesByEmail" </b>method.<br><br>
                    The method returns a list of aliases (along with the type and status) created for a given email address
                    in the scope of a given merchant.
      parameters:
        - name: email
          in: path
          description: For Aliases registered with values <b><i><b>"aliasValue"</b></b></i> and <b><i><b>"aliasLabel"</b></b></i>
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction200Blik"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "404":
          description: 'Alias not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionNotFoundResponse'
      security:
        - basicAuth: []



   "/api/v1/card/info/{orderId}":
    get:
      tags:
        - Card API
      summary: Card info
      parameters:
        - name: orderId
          in: path
          description: An unique order ID.
          required: true
          schema:
            type: integer
            format: int64
      description: The method generates information about specific payment card based on previous payment. Including reference number to charge card without CVV authorisation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardinfores"
        "400":
          description: Wrong input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorCodeResponse"
        "403":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "404":
          description: Transaction not exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorCodeResponse"
      security:
        - basicAuth: []
   /api/v1/card/chargeWith3ds:
    post:
      tags:
        - Card API
      summary: Charge card with 3DS
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardChargeRequestBody"
      description: The method allows to charge a card based on the reference number.
      responses:
        "200":
          description: The charge card command has been accepted - notification will be
            send on success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargeCard3dsSuccessResponse"
        "201":
          description: The card payment requires 3DS redirection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargeCard3dsSuccessResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
      security:
        - basicAuth: []
   /api/v1/card/charge:
    post:
      tags:
        - Card API
      summary: Charge card
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardChargeRequestBody"
      description:  The method allows to charge a card based on the reference number.
      responses:
        "200":
          description: The charge card command has been accepted - notification will be
            send on success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargeCardSuccessResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
      security:
        - basicAuth: []
   /api/v1/card/pay:
    post:
      tags:
        - Card API
      summary: Card Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardRegisterRequestBody"
      description: Method is used for charging customer's card. Method directly sends card details.
      responses:
        "200":
          description: The card payment has been succesed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardPaySuccessResponse"
        "201":
          description: The card payment requires 3DS redirection.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardPayThreeDSecureResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputData"
        "401":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardPayResponse409"
      security:
        - basicAuth: []


   /bundle/payWithGoogle/{TOKEN}:
    get:
      tags:
        - GPay API
      summary: Token transfer
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        -
          name: TOKEN
          in: path
          description: Token obtained from Przelewy24.
      description:
        Upon token obtaining from P24, JavaScript script should be called.<br><br>

        On completion of the transaction, a relevant response (callback) is called.

        In case 3D-Secure is required, customer will be redirected to bank’s website. After authorisation customer will be redirected to URL provided in <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>"urlReturn"</b></a> parameter.
      x-codeSamples:
          - lang: HTML
            source: |
              <head>
                <meta charset="UTF-8">
                <meta name="viewport"
                      content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
                <meta http-equiv="X-UA-Compatible" content="ie=edge">
                <title>PayWithGoogle</title>
                <script src="https://secure.przelewy24.pl/bundle/payWithGoogle/{{TOKEN}}"></script>
              </head>
              <body>
              <script>
                document.addEventListener("DOMContentLoaded", function () {
                    Przelewy24PayWithGoogle.config({
                        errorCallback: function () {
                            alert("error");
                        },
                        exceptionCallback: function () {
                            alert("exception");
                        },
                        requestFailedCallback: function () {
                            alert('requestFailed');
                        },
                        completePaymentCallback: function () {
                            alert("success");
                        }
                    });
                    Przelewy24PayWithGoogle.charge();
                });
              </script>
              </body>
      security:
        - basicAuth: []
   /bundle/ApplePay/{TOKEN}:
    get:
      tags:
        - APay API
      summary: Token transfer
      servers:
      - url: https://secure.przelewy24.pl
        description: Production server (uses live data)
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        -
          name: TOKEN
          in: path
          description: Token obtained from Przelewy24.
      description:
        Upon token obtaining from P24, JavaScript script should be called<br><br>

        On completion of the transaction, a relevant response (callback) is called.
      x-codeSamples:
          - lang: HTML
            source: |
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport"
                          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
                    <meta http-equiv="X-UA-Compatible" content="ie=edge">
                    <title>Apple Pay</title>
                    <script src="https://secure.przelewy24.pl/bundle/applepay/{{TOKEN}}"></script>
                </head>
                <body>
                <script>
                    document.addEventListener("DOMContentLoaded", function () {
                      Przelewy24ApplePay.config({
                        errorCallback: function () {
                            alert("error");
                        },
                        exceptionCallback: function () {
                            alert("exception");
                        },
                        requestFailedCallback: function () {
                            alert('requestFailed');
                        },
                        completePaymentCallback: function () {
                            alert("success");
                        }
                      });
                    Przelewy24ApplePay.charge();
                    });
                  </script>

                  </body>
      security:
        - basicAuth: []



####components######
components:
  securitySchemes:
   basicAuth:
      description: This is the default authentication method. User and secretId are available in P24 panel:<br/>- "User" it's the same value as posId,<br/>- secretId it's the samevalue as key for reports (API key).
      type: http
      scheme: basic
  schemas:
    TransactionVerificationResponse:
      properties:
        data:
          properties:
            status:
              type: string
              default: success
          type: object
        responseCode:
          type: number
          default: 0
    TransactionVerificationBody:
      properties:
        merchantId:
          description: Merchant ID
          type: integer
        posId:
          description: Shop identification number (defaults to merchant ID)
          type: integer
        sessionId:
          description: Unique identifier from merchant's system
          type: string
          maxLength: 100
        amount:
          description: Transaction amount which format is presented as amount in lowest currency unit, e.g. 1.23 PLN = 123
          type: integer
        currency:
          description: Currency
          type: string
          maxLength: 3
          default: "PLN"
        orderId:
          description: Id of an order assigned by P24
          type: integer
          format: int64
        sign:
          description: Checksum of parameters:<br>
            {<font color = "brown">"sessionId":</font>"str",<font color = "brown">"orderId":</font>int,<font color = "brown">"amount":</font>int,<font color = "brown">"currency":</font>"str",<font color = "brown">"crc":</font>"str"}
            <br><br>calculated with the use of sha384<br><br> <b><font color = "#DB2053">IMPORTANT!:</font></b><br>  in case json_encode function is used, the following attributes should be added
            <br> "JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
          type: string
      required:
        - posId
        - sessionId
        - amount
        - currency
        - orderId
        - sign
        - merchantId
    AvailabilityHoursResponse:
      properties:
        mondayToFriday:
          type: string
        saturday:
          type: string
        sunday:
          type: string
    TransactionRequestBody1:
      type: object
      properties:
        merchantId:
          name: merchantId
          in: formData
          description: Merchant identification number
          type: integer
        posId:
          name: posId
          in: formData
          description: Shop identification number (defaults to merchant ID)
          type: integer
        sessionId:
          name: sessionId
          in: formData
          description: Unique identifier from merchant's system
          type: string
          maxLength: 100
        amount:
          name: amount
          in: formData
          description: Transaction amount expressed in lowest currency unit, e.g. 1.23 PLN = 123
          type: integer
        currency:
          name: currency
          in: formData
          description: Currency compatible with ISO, e.g. PLN
          type: string
          maxLength: 3
          default: PLN
        description:
          name: description
          in: formData
          description: Transaction description
          type: string
          maxLength: 1024
        email:
          name: email
          in: formData
          description: Customer's e-mail
          type: string
          maxLength: 50
        client:
          name: client
          in: formData
          description: Customer's first name and surname
          type: string
          maxLength: 40
        address:
          name: address
          in: formData
          description: Customer's address
          type: string
          maxLength: 80
        zip:
          name: zip
          in: formData
          description: Customer's postal code
          type: string
          maxLength: 10
        city:
          name: city
          in: formData
          description: Customer's city
          type: string
          maxLength: 50
        country:
          name: country
          in: formData
          description: Country codes compatible with  ISO, e.g. PL, DE, etc.
          type: string
          maxLength: 2
          default: PL
        phone:
          name: phone
          in: formData
          description: "Customer's telephone in the following format:  481321132123"
          type: string
          maxLength: 12
        language:
          name: language
          in: formData
          description: "One of following language codes according to ISO 639-1: bg, cs, de,
            en, es, fr, hr, hu, it, nl, pl, pt, se, sk"
          type: string
          maxLength: 2
          default: pl
        method:
          name: method
          in: formData
          description: Payment method ID. List of payment methods provided in the panel or
            available through API
          type: integer
        urlReturn:
          name: urlReturn
          in: formData
          description: URL address to which customer will be redirected when transaction is
            complete
          type: string
          maxLength: 250
        urlStatus:
          name: urlStatus
          in: formData
          description: URL address to which transaction status will be send
          type: string
          maxLength: 250
        timeLimit:
          name: timeLimit
          in: formData
          description: Time limit for transaction process, 0 - no limit, max. 99 (in
            minutes)
          type: integer
        channel:
          name: channel
          description: "
                      1 - card + ApplePay + GooglePay,
                      2 - transfer,
                      4 - traditional transfer,
                      8 -
                                  N/A,
                      16 - all 24/7 – makes available all payment methods,
                      32 -
                                  use pre-payment,
                      64 – only pay-by-link methods,
                      128 –
                                  instalment payment forms,
                      256 – wallets, 
                      4096 - card

                      <p>To activate the
                                  specific channels, their values should be summed
                                  up.

                      <p>Example:

                      transfer and traditional transfer:
                                  channel=6"
          type: integer
          enum:
            - 1
            - 2
            - 4
            - 8
            - 16
            - 32
            - 64
            - 128
            - 256
            - 4096
        waitForResult:
          type: boolean
          description: Parameter determines wheter a user should wait for result of the transaction in the transaction service and be redirected back to the shop upon receiving confirmation or be redirected back to the shop immediately after payment. <a href="#section/Use-cases"><b>Read more</b></a>
        regulationAccept:
          type: boolean
          description: 'Acceptance of Przelewy24 regulations: <br/>false – display consent on p24 website (default),<br/>true – consent granted, do not display.<br/>In case the „true” parameter is sent, the consent – worded as follows – must be displayed on the Partner’s website: „I hereby state that I have read the [regulations](https://www.przelewy24.pl/regulamin) and [information obligation](https://www.przelewy24.pl/obowiazekinformacyjny) of ”Przelewy24”. <br/>Under words <i>regulations</i> and <i>information obligation</i> there must be hyperlinks redirecting to websites with these documents. The checkbox must not be ticked by default.'
          default: false
        shipping:
          name: shipping
          in: formData
          description: Delivery cost
          type: integer
        transferLabel:
          name: transferLabel
          in: formData
          description: Description forwarded to transfer's description  (not in every payment methods).
          type: string
          maxLength: 20
        mobileLib:
          name: mobileLib
          description: The parameter is necessary while using SDK libraries. The value passed in <b>mobileLib</b> parameter is always 1 and value passed in <b>sdkVersion</b> determines which version of library should be used.
          type: integer
          enum:
            - 1
        sdkVersion:
          name: sdkVersion
          in: formData
          description: Version of mobile library. Determines if transaction is mobile.
          type: string
          maxLength: 10
        sign:
          name: sign
          in: formData
          type: string
          maxLength: 100
          description: <br>Checksum of parameters:<br>
            {<font color = "brown">"sessionId":</font>"str",<font color = "brown">"merchantId":</font>int,<font color = "brown">"amount":</font>int,<font color = "brown">"currency":</font>"str",<font color = "brown">"crc":</font>"str"}
            <br><br>calculated with the use of sha384<br><br> <b><font color = "#DB2053">IMPORTANT!:</font></b><br>  in case json_encode function is used, the following attributes should be added <br> "JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
        encoding:
          name: encoding
          in: formData
          description: "Coding system for characters sent: ISO-8859-2, UTF-8, Windows-1250"
          type: string
          maxLength: 15
        methodRefId:
          name: methodRefId
          in: formData
          description: Special parameter for some payment flows e.g. BLIK and Card
            one-click.
          type: string
          maxLength: 250
        cart:
          description: cart
          items:
            $ref: "#/components/schemas/CartParameters"
        additional:
          type: object
          description: Set of additional information about the transaction or the payer
          properties:
            shipping:
              type: object
              description: Additional shipping informatin
              properties:
                type:
                  type: integer
                  description: Type of shipment:<br/> 0 - courier<br/>1 - delivery point<br/>2 - parcel locker<br/>3 - package in a shop
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                address:
                  type: string
                  description: 'Shipment address: street and number'
                zip:
                  type: string
                  description: Shipment zip code
                city:
                  type: string
                  description: Shipment city
                country:
                  type: string
                  description: Shipment country
              required:
                - type
                - address
                - zip
                - city
                - country
      required:
        - merchantId
        - posId
        - sessionId
        - amount
        - currency
        - description
        - email
        - country
        - language
        - urlReturn
        - ttl
        - sign
    TransactionRegistrationResponse:
      properties:
        data:
          properties:
            token:
              type: string
          type: object
        responseCode:
          type: number
          default: 0

    Transaction200Blik:
      properties:
        data:
          description: Array of objects related to the BLIK alias
          items:
            $ref: "#/components/schemas/BlikAlias200"
        responseCode:
          type: integer
          default: 0

    BlikAlias200:
      properties:
        value: 
          type: string
          description: alias value
        type:
          type: string
          description: alias type
        status:
          type: string
          description: alias status
        expirationDate:
          type: string
          description: alias expiration date

    InvalidInputData:
      properties:
        error:
          type: string
          default: Invalid input data
          example: Invalid input data
        code:
          type: number
          default: 400
          example: 400
    UnauthorizedResponse:
      properties:
        error:
          type: string
          default: Incorrect authentication
          example: Incorrect authentication
        code:
          type: number
          default: 401
          example: 401
    TransactionTestAccess200:
      properties:
        data:
          type: boolean
          default: true
        error:
          type: string
    PaymentMethodsResponse:
      properties:
        name:
          type: string
          description: Name of payment method
        id:
          type: integer
          description: Payment method ID
        status:
          type: boolean
          description: Specifies whether a given method is active
        imgUrl:
          type: string
          description: Link do grafiki
        mobileImgUrl:
          type: string
          description: Link do grafiki mobilnej
        mobile:
          type: boolean
          description: Czy forma płatności jest dostępna mobilnie
        availabilityHours:
          $ref: "#/components/schemas/AvailabilityHoursResponse"
    BasicResponse:
      properties:
        data:
          type: array
          default: Payment methods not found
          items:
            type: string
            default: Payment methods not found
        responseCode:
          default: 404
          type: number
    TransactionRefundJsonRequestBody:
      properties:
        requestId:
          type: string
          description: Individual request ID
          maxLength: 45
        refunds:
          type: array
          items:
            $ref: "#/components/schemas/RefundRequestArrayDataBasic"
        refundsUuid:
          type: string
          description: Individual ID for a correct refund request in the merchant’s system
          maxLength: 35
        urlStatus:
          type: string
          description: Notification address for the refund batch transferred
      required:
        - requestId
        - refunds
        - refundsUuid
    RefundRequestArrayDataBasic:
      properties:
        orderId:
          type: integer
          format: int64
          description: Transaction order ID from Przelewy24
        sessionId:
          type: string
          description: Transaction session ID from the Partner’s system
        amount:
          type: integer
          description: Amount of refund
        description:
          type: string
          description: Refund description visible in transfer details
          maxLength: 35
      type: object
      required:
        - orderId
        - sessionId
        - amount
    TransactionRefund201:
       properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TransactionRefund201Item"
        responseCode:
          type: number
          example: 0
    TransactionRefund201Item:
     properties:
        orderId:
          type: integer
          format: int64
          description: Transaction order ID from Przelewy24
        sessionId:
          type: string
          description: Transaction session ID from the Partner’s system
        amount:
          type: integer
          description: Amount of refund
        description:
          type: string
          description: Transaction description
        status:
          type: boolean
          example: true
          description: Was refund attempt successful?
        message:
          type: string
          example: success
          description: Text description of successful refund
    InvalidInputDataRefund:
      properties:
        error:
          type: string
          example: Request already exists
          description: Error message. Possbile values:<br/><br/>"Invalid input parameters" - in case incorrect parameters or their values,<br/><br/> "Request already exists" - in case the refund was already created,<br/><br/> "Concurrent call" - in case the  refund is multiplied.
        code:
          type: number
          default: 400
          example: 400
    TransactionRefund409:
     properties:
        error:
          type: array
          items:
            $ref: "#/components/schemas/TransactionRefund409Item"
        code:
          type: integer
          example: 409
    TransactionRefund409Item:
      properties:
        orderId:
          type: integer
          format: int64
          description: Transaction order ID from Przelewy24
        sessionId:
          type: string
          description: Transaction session ID from the Partner’s system
        amount:
          type: integer
          description: Amount of refund
        description:
          type: string
          description: Refund description
        status:
          type: boolean
          example: false
          description: Was refund attempt successful?
        message:
          type: string
          example: The amount of refund exceeds available amount for the transaction
          description: Error message. Possible values:<br/><br/>"Transaction not found" - in case the transaction is not found, <br/><br/>"Transaction in wrong status - cannot refund" - in case the transaction is in wrong status, therefore the refundis not possible, <br/><br/>"Insufficient funds available" - in case there are not enough funds to execute the refund, <br/><br/>"The amount of refund exceeds available amount for the transaction" - in case the amount of the refund request exceeds available amount for the transaction
    Refund500Response:
      properties:
        error:
          type: string
          example: Unknown error
          description: Error message
        code:
          type: integer
          example: 500
          default: 500
    TransactionRegisterOfflineRequest:
      properties:
        token:
          type: string
    TransactionRegistrationOffline200:
      properties:
        data:
          properties:
            orderId:
              type: integer
              format: int64
              description: Unique transaction ID assigned by P24
            sessionId:
              type: string
              description: Unique ID assigned by the merchant’s system
            amount:
              type: integer
              description: Transaction amount
            statement:
              type: string
              description: Full payment title
            iban:
              type: string
              description: Number of account for payment
            ibanOwner:
              type: string
              description: Name of payment recipient
            ibanOwnerAddress:
              type: string
              description: Address of payment recipient
          type: object
        responseCode:
          type: number
          example: 0
    TransactionRegistrationOffline409:
      properties:
        error:
          type: string
          default: Unable to create offline transaction
          example: Unable to create offline transaction
        code:
          type: number
          example: 409
    ErrorCodeResponse:
      properties:
        error:
          type: string
          example: Undefined error
          default: Undefined error
        code:
          type: integer
          example: 500
          default: 500
      type: object
    TranstactionSplitPayment:
      required:
        - merchantId
        - posId
        - sessionId
        - amount
        - currency
        - descrition
        - email
        - country
        - language
        - urlReturn
        - sign
        - splitPaymentDetails
        - description
      properties:
        merchantId:
          name: merchantId
          in: formData
          description: Merchant identification number
          type: integer
        posId:
          name: posId
          in: formData
          description: Shop identification number (defaults to merchant ID)
          type: integer
        sessionId:
          name: sessionId
          in: formData
          description: Unique identifier from merchant's system
          type: string
          maxLength: 100
        amount:
          name: amount
          in: formData
          description: Transaction amount expressed in lowest currency unit, e.g. 1.23 PLN = 123
          type: integer
        currency:
          name: currency
          in: formData
          description: Currency compatible with ISO, e.g. PLN
          type: string
          maxLength: 3
          default: PLN
        description:
          name: description
          in: formData
          description: Transaction description
          type: string
          maxLength: 1024
        email:
          name: email
          in: formData
          description: Customer's e-mail
          type: string
          maxLength: 50
        client:
          name: client
          in: formData
          description: Customer's first name and surname
          type: string
          maxLength: 40
        address:
          name: address
          in: formData
          description: Customer's address
          type: string
          maxLength: 80
        zip:
          name: zip
          in: formData
          description: Customer's postal code
          type: string
          maxLength: 10
        city:
          name: city
          in: formData
          description: Customer's city
          type: string
          maxLength: 50
        country:
          name: country
          in: formData
          description: Country codes compatible with  ISO, e.g. PL, DE, etc.
          type: string
          maxLength: 2
          default: PL
        phone:
          name: phone
          in: formData
          description: "Customer's telephone in the following format:  481321132123"
          type: string
          maxLength: 12
        language:
          name: language
          in: formData
          description: "One of following language codes according to ISO 639-1: bg, cs, de,
            en, es, fr, hr, hu, it, nl, pl, pt, se, sk"
          type: string
          default: pl
          maxLength: 2
        method:
          name: method
          in: formData
          description: Payment method ID. List of payment methods provided in the panel or
            available through API
          type: integer
        urlReturn:
          name: urlReturn
          in: formData
          description: URL address to which customer will be redirected when transaction is
            complete
          type: string
          maxLength: 250
        urlStatus:
          name: urlStatus
          in: formData
          description: URL address to which transaction status will be send
          type: string
          maxLength: 250
        timeLimit:
          name: timeLimit
          in: formData
          description: Time limit for transaction process, 0 - no limit, max. 99 (in
            minutes)
          type: integer
        channel:
          name: channel
          in: formData
          description: "
                      1 - card + ApplePay + GooglePay,
                      2 - transfer,
                      4 - traditional transfer,
                      8 -
                                  N/A,
                      16 - all 24/7 – makes available all payment methods,
                      32 -
                                  use pre-payment,
                      64 – only pay-by-link methods,
                      128 –
                                  instalment payment forms,
                      256 – wallets, 
                      4096 - card

                      <p>To activate the
                                  specific channels, their values should be summed
                                  up.

                      <p>Example:

                      transfer and traditional transfer:
                        channel=6"
          type: integer
          enum:
            - "1"
            - "2"
            - "4"
            - "8"
            - "16"
            - "32"
            - "64"
            - "128"
            - "256"
            - "4096"
        shipping:
          name: shipping
          in: formData
          description: Delivery cost
          type: integer
        transferLabel:
          name: transferLabel
          in: formData
          description: Description forwarded to transfer's description (not in every payment methods).
          type: string
          maxLength: 20
        sdkVersion:
          name: sdkVersion
          in: formData
          description: Version of mobile library. Determines if transaction is mobile.
          type: string
          maxLength: 10
        sign:
          name: sign
          in: formData
          type: string
          maxLength: 100
          description: <br>Checksum of parameters:<br>
            {<font color = "brown">"sessionId":</font>"string",<font color = "brown">"merchantId":</font>int,<font color = "brown">"amount":</font>int,<font color = "brown">"currency":</font>"string",<font color = "brown">"crc":</font>"string"}
            <br><br>calculated with the use of sha384<br><br> <b><font color = "#DB2053">IMPORTANT!:</font></b><br>  in case json_encode function is used, the following attributes should be added <br> "JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
        encoding:
          name: encoding
          in: formData
          description: "Coding system for characters sent: ISO-8859-2, UTF-8, Windows-1250"
          type: string
          maxLength: 15
        cart:
          description: cart
          items:
            $ref: "#/components/schemas/CartParameters"
        methodRefId:
          name: methodRefId
          in: formData
          description: Special parameter for some payment flows e.g. BLIK and Card
            one-click.
          type: string
          maxLength: 250
        splitPaymentDetails:
          type: object
          properties:
            vatAmount:
              type: integer
              description: Kwota podatku VAT
            invoiceNumber:
              type: string
              description: Numer faktury
            nip:
              type: string
              description: Numer identyfikacji podatkowej
            iban:
              type: string
              description: Międzynarodowy numer rachunku bankowego IBAN (international bank account number)
          required:
            - vatAmount
            - invoiceNumber
            - nip
    CartParameters:
      description: Cart Parameters
      type: object
      required:
        - sellerId
        - sellerCategory
      properties:
        sellerId:
          type: string
          description: Shop ID on the part of Partner
        sellerCategory:
          type: string
          description: Shop category
        name:
          type: string
          description: Product name<br/><br/><font color="red">Required for PayPal payment method</font>
        description:
          type: string
          description: Product description<br/><br/><font color="red">Required for PayPal payment method</font>
        quantity:
          type: integer
          description: Product quantity<br/><br/><font color="red">Required for PayPal payment method</font>
        price:
          type: integer
          description: Product price<br/><br/><font color="red">Required for PayPal payment method</font>
        number:
          type: string
          description: Product number<br/><br/><font color="red">Required for PayPal payment method</font>
    TransactionRefundsInfoResponse:
      properties:
        data:
          $ref: "#/components/schemas/TransactionWithRefundsResponse"
        responseCode:
          type: number
          example: 0
    PaymentMethodsResponseMethod:
      properties:
        name:
          type: string
          description: Name of payment method
        id:
          type: integer
          description: Payment method ID
        group:
          type: string
          description: "Possible values: FastTransfers, Blik, eTransfer, Credit Card, Installments, Wallet, Foreign, PrePayment, TraditionalTransfer, Another. SplitPayment"
        subgroup:
          type: string
          description: "Possible values: FastTransfers, Blik, eTransfer, Credit Card, Installments, Wallet, Foreign, PrePayment, TraditionalTransfer, Another. SplitPayment"
        status:
          type: boolean
          example: true
          description: Specifies whether a given method is active
        imgUrl:
          type: string
          description: Link to graphics   
        mobileImgUrl:
          type: string
          description: Link to mobile graphics 
        mobile:
          type: boolean
          example: true
          description: Is the payment mobile method available?
        availabilityHours:
          $ref: "#/components/schemas/availabilityHours"

    availabilityHours:
      type: object
      description: An object containing information about the method's availability hours (methods with ID 177, 178 return bool true/false information)
      properties:
        mondayToFriday:
          type: string
        saturday:
          type: string
        sunday:
          type: string
    TransactionWithRefundsResponse:
      properties:
        orderId:
          type: integer
          format: int64
        sessionId:
          type: string
        amount:
          type: integer
        currency:
          type: string
        refunds:
          type: array
          items:
            $ref: "#/components/schemas/RefundsCollection"
      type: object
    RefundsCollection:
      properties:
        batchId:
          type: integer
        requestId:
          type: string
        date:
          type: string
        login:
          type: string
        description:
          type: string
        status:
          type: integer
          example: 3
          default: 3
          description: 1 - completed,<br/>2 - pending,<br/>3 - awaiting P24's acceptance,<br/>4 - rejected
        amount:
          type: integer
      type: object
    TransactionNotFoundResponse:
     properties:
        error:
          type: string
          default: Transaction not found
          example: Transaction not found
        responseCode:
          type: number
          default: 0
          example: 0
    InfoResponse:
      properties:
        country:
          type: string
          default: PL
        bank:
          type: string
          default: PL
      type: object
    TransactionBySessionIdSuccessResponse:
      properties:
        data:
          $ref: "#/components/schemas/TransactionBySessionIdResponse"
        responseCode:
          type: number
          default: 0
      type: object
    TransactionBySessionIdResponse:
      properties:
        statement:
          type: string
          description: Transfer title
        orderId:
          type: integer
          format: int64
          description: Transaction ID
        sessionId:
          type: string
          description: Transaction ID assigned by Merchant
        status:
          type: integer
          description: Transaction status. 0 - no payment, 1 - advance payment, 2 - payment made, 3 - payment returned
        amount:
          type: integer
          description: Transaction amount
        currency:
          type: string
          default: PLN
          description: Transaction currency
        date:
          type: string
          description: Transaction registration date
        dateOfTransaction:
          type: string
          description: Date of payment
        clientEmail:
          type: string
          description: Customer's e-mail
        accountMD5:
          type: string
          description: Customer's hashed bank account number
        paymentMethod:
          type: integer
          description: Payment method ID
        description:
          type: string
          description: Transaction description
        clientName:
          type: string
          description: Customer's first name and surname
        clientAddress:
          type: string
          description: Customer's address
        clientCity:
          type: string
          description: Customer's city
        clientPostcode:
          type: string
          description: Customer's zip code
        batchId:
          type: integer
          description: Batch number in which the transaction was paid
        fee:
          type: string
          description: Commission
    RecurringParams:
      type: object
      properties:
        token:
          type: string
          description: Token obtained during transaction registration
        blikCode:
          type: string
          description: 6-digit, one-time BLIK code generated in the app
        aliasValue:
          type: string
          description: Unique alias of the user which can be used to charge client's next transactions
        aliasLabel:
          type: string
          description: Alias label displayed in the app
          minLength: 5
          maxLength: 35
        recurring:
          $ref: "#/components/schemas/RecurringParamsIn"
      required:
        - token
        - blikCode
    RecurringParamsIn:
      type: object
      discriminator:
        propertyName: type
        mapping:
          M: '#/components/schemas/RecurringParametersM'
          A: '#/components/schemas/RecurringParametersA'
          A+: '#/components/schemas/RecurringParametersA+'
      properties:
        type:
          type: string
          name: type
          enum:
            - M
            - A
            - A+
          description: 'Type of recurring payment; allowed values: A, A+, M'
          in: formData
          default: M
        expirationDate:
          type: string
          description: 'Recurring payment expiration date in format: YYYY-MM-DDThh:mm:ss'
        frequency:
          type: string
          description: 'Frequency of the recurrency; value must fulfill regex: [1-9][DWMQY][ANP]\([0-9]{1,2}|E\)'
        totalLimitAmount:
          type: integer
          description: 'Maximum total amount that will be charged through the process'
        limitAmount:
          type: integer
          description: 'Maximum amount that will be charged in a single payment'
        totalLimitCount:
          type: integer
          description: 'Number of payments that will be issued in the whole process'
        minimumTime:
          type: boolean
          description: 'Parameter for controlling the flag min'
          default: true
        availableBanks:
          description: 'Parameter to control the verification of whether the bank supports recursion. If set to false, it is not checked if the bank supports recursion.'
          type: boolean
    RecurringParametersA:
      allOf:
        - $ref: '#/components/schemas/RecurringParamsIn'
        - type: object
          properties:
            type:
              type: string
              name: type
              enum:
                - M
                - A
                - A+
              description: 'the type of recurring payment; allowed values: A, A+, M'
              in: formData
            expirationDate:
              type: string
              description: 'allowed format: YYYY-MM-DD hh:mm:ss'
            frequency:
              type: string
              description: 'frequency of the recurrency; value must fulfill regex: [1-9][DWMQY][ANP]\([0-9]{1,2}|E\)'
            totalLimitAmount:
              type: integer
              description: 'maximum total amount that will be charged through the process'
            limitAmount:
              type: integer
              description: 'maximum amount that will be charged in a single payment'
            totalLimitCount:
              type: integer
              descrition: 'number of payments that will be issued in the whole process'
            minimumTime:
              type: boolean
              description: 'parameter for controlling the flag min'
              default: true
            availableBanks:
              description: 'parameter to control the verification of whether the bank supports recursion.
        If set to false, it is not checked if the bank supports recursion.'
              type: boolean
          required:
            - totalLimitCount
            - expirationDate
            - totalLimitAmount
            - limitAmount
            - frequency
    RecurringParametersA+:
     allOf:
        - $ref: '#/components/schemas/RecurringParamsIn'
        - type: object
          properties:
            type:
              type: string
              name: type
              enum:
                - A
                - A+
                - M
              description: 'the type of recurring payment; allowed values: A, A+, M'
              in: formData
            expirationDate:
              type: string
              description: 'allowed format: YYYY-MM-DD hh:mm:ss'
            frequency:
              type: string
              description: 'frequency of the recurrency; value must fulfill regex: [1-9][DWMQY][ANP]\([0-9]{1,2}|E\)'
            totalLimitAmount:
              type: integer
              description: 'maximum total amount that will be charged through the process'
            limitAmount:
              type: integer
              description: 'maximum amount that will be charged in a single payment'
            totalLimitCount:
              type: integer
              descrition: 'number of payments that will be issued in the whole process'
            minimumTime:
              type: boolean
              description: 'parameter for controlling the flag min'
              default: true
            availableBanks:
              description: 'parameter to control the verification of whether the bank supports recursion.
        If set to false, it is not checked if the bank supports recursion.'
              type: boolean
          required:
            - totalLimitCount
            - expirationDate
            - totalLimitAmount
            - limitAmount
            - frequency
    RecurringParametersM:
       allOf:
        - $ref: '#/components/schemas/RecurringParamsIn'
        - type: object
          properties:
            type:
              type: string
              name: type
              enum:
                - A
                - A+
                - M
              description: 'the type of recurring payment; allowed values: A, A+, M'
              in: formData
            expirationDate:
              type: string
              description: 'allowed format: YYYY-MM-DD hh:mm:ss'
            frequency:
              type: string
              description: 'frequency of the recurrency; value must fulfill regex: [1-9][DWMQY][ANP]\([0-9]{1,2}|E\)'
            totalLimitAmount:
              type: integer
              description: 'maximum total amount that will be charged through the process'
            limitAmount:
              type: integer
              description: 'maximum amount that will be charged in a single payment'
            totalLimitCount:
              type: integer
              descrition: 'number of payments that will be issued in the whole process'
            minimumTime:
              type: boolean
              description: 'parameter for controlling the flag min'
              default: true
            availableBanks:
              description: 'parameter to control the verification of whether the bank supports recursion.
        If set to false, it is not checked if the bank supports recursion.'
              type: boolean
          required:
            - totalLimitCount
    BlikChargeByCodeResponse:
      properties:
        data:
          properties:
            orderId:
              type: integer
              format: int64
            message:
              type: string
          type: object
        responseCode:
          type: number
          default: 0
    BlikOneClick:
      type: object
      required:
        - token
        - type
      discriminator:
        propertyName: type
        mapping:
          alias: '#/components/schemas/Alias'
          alternativeKey: '#/components/schemas/Alternativekey'
          #blikCode: '#/components/schemas/Blik_Code'
      properties:
        token:
          type: string
          description: Token obtained from transaction registration
        type:
          type: string
        aliasValue:
          type: string
          description: <b> Warning! If you send the parameter it will result in overwriting the current value. </b> <br/> Unique alias of the user which can be used to charge client's next transactions
        aliasLabel:
          type: string
          description: <b> Warning! If you send the parameter it will result in overwriting the current value. </b> <br/> Alias label displayed in the app
        recurring:
          description:
          $ref: "#/components/schemas/RecurringParamsIn"
    Alias:
      description: alias description
      type: object
      allOf:
        - $ref: '#/components/schemas/BlikOneClick'
        - type: object
          properties:
            token:
              type: string
              description: Token obtained from transaction registration
            type:
              type: string
              description: Set value „alias”
          required:
            - token
            - type
    Alternativekey:
      type: object
      allOf:
        - $ref: '#/components/schemas/BlikOneClick'
        - type: object
          properties:
            token:
              type: string
              description: Token obtained from transaction registration
            type:
              type: string
              description: Send value „alternativeKey”
            alternativeKey:
              type: string
              description: Value obtained as a response from chargeByAlias, when charging a token with "type" = "alias" where is assigned more than one banking application 
          required:
            - token
            - type
            - alternativeKey
    # Blik_Code:
    #   type: object
    #   allOf:
    #     - $ref: '#/components/schemas/BlikOneClick'
    #     - type: object
    #       properties:
    #         token:
    #           type: string
    #           description: Token obtained from transaction registration
    #         type:
    #           type: string
    #           description: Send value „blikCode”
    #         blikCode:
    #           type: string
    #           description: Value T6 entered by Customer
    #       required:
    #         - token
    #         - type
    #         - blikCode
    BlikChargeByAliasResponse:
      properties:
        data:
          properties:
            orderId:
              type: integer
              format: int64
            message:
              type: string
          type: object
    ChargeByAlias409:
      properties:
        error:
          type: object
          properties:
            message:
              type: string
            alternativeKeys:
              type: array
              items:
                $ref: "#/components/schemas/alternativeKeysItem"
        code:
          type: integer
          example: 51
    # ChargeByAlias409Item:
    #   properties:
    #     message:
    #       type: string
    #     alternativeKeys:
    #       type: array
    #       items:
    #         $ref: "#/components/schemas/alternativeKeysItem"
    alternativeKeysItem:
      properties:
        label:
          type: string
        alias:
          type: string
    cardinfores:
      properties:
        data:
          type: object
          properties:
            refId:
              type: string
              description: Unique card token (reference code)
            bin:
              type: integer
              description: Card’s BIN number
            mask:
              type: string
              description: Masked card number
            cardType:
              type: string
              description: Card type (VISA, ECMC)
            cardDate:
              type: string
              description: Expiry date in the following format MMYYYY
            hash:
              type: string
              description: Unique card hash – unique for each card
        responseCode:
          type: number
    CardChargeRequestBody:
       properties:
        token:
          type: string
          description: Token registered by <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>transaction/register</b></a> method. Card reference number must be provided during transaction registration in <b>methodRefId</b> parameter.
    ChargeCard3dsSuccessResponse:
      properties:
        data:
          properties:
            orderId:
              type: integer
              format: int64
            redirectUrl:
              type: string
          type: object
        responseCode:
          type: number
          example: 0
    ChargeCardSuccessResponse:
      properties:
        data:
          properties:
            orderId:
              type: integer
              format: int64
              description: Registered transaction ID
          type: object
        responseCode:
          type: number
          default: 0
          example: 0
    CardRegisterRequestBody:
      type: object
      properties:
        transactionToken:
          type: string
          description: Token obtained during registration
        cardNumber:
          type: string
          description: Card number
          maxLength: 16
        cardDate:
          type: string
          description: Card expiry date in format MMYYYY
        cvv:
          type: string
          description: Card CVV
        clientName:
          type: string
          description: First name and surname of cardholder
      required:
        - transactionToken
        - cardNumber
        - cardDate
        - cvv
        - clientName
    CardPayThreeDSecureResponse:
      properties:
        data:
          properties:
            orderId:
              type: integer
              format: int64
            redirectUrl:
              type: string
          type: object
        responseCode:
          type: number
          example: 0
    CardPayResponse409:
      properties:
        error:
          type: string
          example: Unable to make payment.
        code:
          type: number
    CardPaySuccessResponse:
      properties:
        data:
          properties:
            orderId:
              type: integer
              format: int64
            redirectUrl:
              type: string
          type: object
        responseCode:
          type: number
          example: 0
    blikadnotification:
      properties:
        email:
          type: string
          description: client email
        value:
          type: string
          description: alias value
        type:
          type: string
          description: UID for oneclick, PAYID for recurring payments
        status:
          type: string
          description: REGISTERED / UNREGISTERED / EXPIRED
    bliknotification:
      properties:
        data:
          properties:
            orderId:
              type: integer
              format: int64
              description: Order ID
            sessionId:
              type: string
              description: Merchant session ID
            method:
              type: integer
              description: Payment Method ID
            result:
              description: Array of values
              type: object
              properties:
                error:
                  type: string
                  description: Error code - 0 for success
                message:
                  type: string
                  description: Error message
                status:
                  type: string
                  description: Transaction status
                trxRef:
                  type: string
                  description: BLIK transaction reference number
            sign:
              type: string
              description: <br>Checksum of parameters:<br>
                {<font color = "brown">"orderId":</font>int,
                <font color = "brown">"sessionId":</font>"string",
                <font color = "brown">"method":</font>int,
                <font color = "brown">"result":</font>array,
                <font color = "brown">"crc":</font>"string"}
                <br><br>calculated with the use of sha384<br><br> <b><font color = "#DB2053">IMPORTANT!:</font></b><br>  in case json_encode function is used, the following attributes should be added <br> "JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
    CardNotificationExtN:
       properties:
        amount:
          type: integer
          description: Transaction amount
        3ds:
          type: boolean
          description: Was 3D-Secure performed during payment?
        method:
          type: integer
          description: Payment method ID
        orderId:
          type: integer
          format: int64
          description: Transaction number assigned by P24 for oneclick sampling
        sessionId:
          type: string
          description: Unique identifier from merchant's system
        errorCode:
          type: string
          description: Error code
        errorMessage:
          type: string
          description: Error description 
        sign:
          type: string
          description: <br> Before calculating the sign value, it is necessary to convert the alphanumeric characters to diacritics.<br><br>Checksum of parameters:<br>{<font color = "brown">"amount":</font>int,<font color = "brown">"3ds":</font>boolean,<font color = "brown">"method":</font>int,<font color = "brown">"orderId":</font>int,<font color = "brown">"sessionId":</font>"str",<br/><font color = "brown">"errorCode":</font>"str",<font color = "brown">"errorMessage":</font>"str",<font color = "brown">"crc":</font>"str"}
                <br><br>Calculated with the use of SHA384<br><br> <b><font color = "#DB2053">IMPORTANT!:</font></b><br>  in case json_encode function is used, the following attributes should be added <br> "JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
    CardNotificationExt:
      properties:
        amount:
          type: integer
          description: Transaction amount
        3ds:
          type: boolean
          description: Was 3D-Secure performed during payment?
        method:
          type: integer
          description: Payment method ID
        refId:
          type: string
          description: Card reference number
        orderId:
          type: integer
          format: int64
          description: Transaction number assigned by P24 for oneclick sampling
        sessionId:
          type: string
          description: Unique identifier from merchant's system
        bin:
          type: integer
          description: Registered card bin
        maskedCCNumber:
          type: string
          description: Masked card number
        ccExp:
          type: string
          description: Card expiry date in MMYYYY format eg. 122020
        hash:
          type: string
          description: Unique card hash – unique for each card
        cardCountry:
          type: string
          description: Country code compatible with  ISO, e.g. PL
          example: "PL"
        risk:
          type: integer
          description: 0 – safe, 1 – suspicious, 2 – hazardous. Score calculated using a card payment risk calculation tool
        liabilityshift:
          type: boolean
          description: 1 – Yes, 0 – No
          example: false
        sign:
          type: string
          description: <br>Checksum of parameters:<br>{<font color = "brown">"amount":</font>int,<font color = "brown">"3ds":</font>boolean,<font color = "brown">"method":</font>int,<font color = "brown">"refId":</font>"str",<font color = "brown">"orderId":</font>int,<font color = "brown">"sessionId":</font>"str",<br/><font color = "brown">"bin":</font>int,<font color = "brown">"maskedCCNumber":</font>"str",<font color = "brown">"ccExp":</font>"str",<font color = "brown">"hash":</font>"str",<br/><font color = "brown">"cardCountry":</font>"str",<font color = "brown">"risk":</font>int,<font color = "brown">"liabilityshift":</font>boolean,<font color = "brown">"crc":</font>"str"}
                <br><br>calculated with the use of sha384<br><br> <b><font color = "#DB2053">IMPORTANT!:</font></b><br>  in case json_encode function is used, the following attributes should be added <br> "JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
    cardpayjson:
      properties:
        cardHolderLabel:
          type: string
        cardNumberLabel:
          type: integer
        cvvLabel:
          type: integer
        expDateLabel:
          type: string
        payButtonCaption:
          type: string
        threeDSAuthMessage:
          type: string
    TransactionRefundResult:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
          description: ID of the refunded transaction in P24 system
        sessionId:
          type: string
          description: ID of the refunded transaction in Partner's system
        merchantId:
          type: integer
          description: Merchant's ID of whose account the refund is performed
        requestId:
          type: string
          description: ID of refund request provided in <a href="#tag/Dodatkowa-funkcjonalnosc-API/paths/~1api~1v1~1transaction~1refund/post"><b>transaction/refund</b></a>
        refundsUuid:
          type: string
          description: ID of refund request in Partner's system provided in <a href="#tag/Dodatkowa-funkcjonalnosc-API/paths/~1api~1v1~1transaction~1refund/post"><b>transaction/refund</b></a>
        amount:
          type: integer
          description: Refund amount expressed in lowest currency unit, e.g. 1.23 PLN = 123
        currency:
          type: string
          example: PLN
          description: Refund currency
        timestamp:
          type: integer
          description: Time of sending the refund notification provided in UNIX timestamp
        status:
          type: integer
          description: Status of the executed refund. The parameter always takes the value 0, which means success
          enum:
            - 0
        sign:
          type: string
          description: <br>Checksum of parameters:<br>
            {<font color = "brown">"orderId":</font>int,<font color = "brown">"sessionId":</font>"str",<font color = "brown">"refundsUuid":</font>"str",<font color = "brown">"merchantId":</font>int,<font color = "brown">"amount":</font>int,<br/><font color = "brown">"currency":</font>"str",<font color = "brown">"status":</font>int,<font color = "brown">"crc":</font>"str"}
            <br><br>calculated with the use of sha384<br><br> <b><font color = "#DB2053">IMPORTANT!:</font></b><br>  in case json_encode function is used, the following attributes should be added <br> "JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
    TransactionResult:
      type: object
      properties:
        merchantId:
          name: merchantId
          in: formData
          description: Merchant identification number
          type: integer
        posId:
          name: posId
          in: formData
          description: Shop identification number (defaults to merchant ID)
          type: integer
        sessionId:
          name: sessionId
          in: formData
          description: Unique identifier from merchant's system
          type: string
          maxLength: 100
        amount:
          name: amount
          in: formData
          description: Amount of paid transaction expressed in lowest currency unit, e.g. 1.23 PLN = 123
          type: integer
        originAmount:
          name: originAmount
          in: formData
          description: Amount of the transaction when registered the token expressed in lowest currency unit, e.g. 1.23 PLN = 123
          type: integer
        currency:
          name: currency
          in: formData
          description: Currency compatible with ISO, e.g. PLN
          type: string
          maxLength: 3
          default: PLN
        orderId:
          name: orderId
          in: formData
          description: Transaction number assigned by P24
          type: integer
          format: int64
        methodId:
          name: methodId
          in: formData
          description: Payment method used by customer
          type: integer
        statement:
          name: statement
          in: formData
          description: Payment title
          type: string
        sign:
          name: sign
          in: formData
          description: <br>Checksum of parameters:<br>
            {<font color = "brown">"merchantId":</font>int,<font color = "brown">"posId":</font>int,<font color = "brown">"sessionId":</font>"string",<font color = "brown">"amount":</font>int,<font color = "brown">"originAmount":</font>int,<font color = "brown">"currency":</font>"string",
            <font color = "brown">"orderId":</font>int,<font color = "brown">"methodId":</font>int,<font color = "brown">"statement":</font>"string",<font color = "brown">"crc":</font>"string"}
            <br><br>calculated with the use of sha384<br><br> <b><font color = "#DB2053">IMPORTANT!:</font></b><br>  in case json_encode function is used, the following attributes should be added
            <br> "JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
          type: string
####end components####

####descriptions####
tags:
####ADDITIONAL API####
  - name: Transaction service API
    x-displayName: Transaction service API
  - name: Additional API functionality
    x-displayName: Additional API functionality
  - name: Notification
    x-displayName: Notification
    description:
      <div id="PP">
      <h2>Transaction result</h2>

      <SchemaDefinition schemaRef="#/components/schemas/TransactionResult" />

      <h2>Automatic transfer of transaction result</h2>
      In case the first notification of the transaction result is not properly received by the merchant’s system (it is not correctly verified by the merchant's system), P24's system will send subsequent notifications. These will be sent after 3, 5, 15, 30, 60, 150 and 450 minutes (+/- 5 min.), unless the correct transaction verification will take place before that.<br><br><b>POST</b> parameters are the same as in the case of the first notification.
      </div>

  - name: RefundNotification
    x-displayName: Refund Notification
    description:
      <div id="PP">
      <h2>Result of the refund</h2>

      A Refund Notification is sent upon successfull refund. Notification is sent asynchronously to the URL address provided in the refund request <a href="#tag/Dodatkowa-funkcjonalnosc-API/paths/~1api~1v1~1transaction~1refund/post"><b>transaction/refund</b></a>, in the parameter <b>urlStatus</b>. If <b>urlStatus</b> value is not provided, the notification is sent to the default URL address configured in the P24 panel (if such address had been provided).
      <br/><br/>
      <div id="note"> In order to configure the default URL address, contact Partner Support:<br/> partner@przelewy24.pl, tel. +48 61 642 93 45.</div><br>

      <SchemaDefinition schemaRef="#/components/schemas/TransactionRefundResult" />
      </div>
####END ADDITIONAL API####

####BLIK####
  - name: BLIK Use Cases
    x-displayName: BLIK Use Cases
    description: >


       # Introduction

       In addition to the standard payment based on redirection to P24 paymantwall, it is also possible to place Blik payments on the Merchant website.

       # How to place BLIK payment on the merchant's website? (BLIK level 0)

       Transaction may process with <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1chargeByCode/post"><b>paymentMethod/blik/chargeByCode</b></a> method. It's necessary to previously register transaction using<a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b> transaction/register </b></a>method. In this case only <b>“token”</b> and <b>“blikCode”</b> parameters are mandatory in <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1chargeByCode/post"><b>paymentMethod/blik/chargeByCode</b></a> method.<br><br><br>

       <img src="get.php?file=ENG_blik_WHITE_LABEL_1_15.png" alt="Blik OneClick" class="center smallImg"><br><br><br>

         <img src="get.php?file=00_blik_en.png" alt="Blik" class="center smallImg">

       # What is 1-click BLIK payment?

       As the name suggests the payment allows to make purchases with one click. It doesn't require entering the BLIK code, only simple one-click acceptance in the application.<br><br><br>

       <img src="get.php?file=ENG_ONE_CLICK_3_4.png" alt="Blik OneClick" class="center smallImg">



        # How to get information about an alias?


        There are two ways to get information about an alias:
        <br><br>
        1. Acquiring information by handling <a href="#tag/Alias-Update-Notification"><b>asynchronous notification.</b></a> (recommended)
        <br><br>
        2. In order to receive an alias for subsequent payments, call the <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1getAliasesByEmail~1{email}/get"><b>getAliasesByEmail</b></a> method.<br>
           The method returns a list of aliases (along with the type and status) created for a given e-mail address in the scope of a given merchant.<br>
           For Aliases registered with values call <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1getAliasesByEmail~1{email}~1custom/get"><b>getAliasesByEmail{email}/custom</b></a><br><br>



        <div id="note">Due to the asynchronous character of the transaction status processing, the <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1getAliasesByEmail~1{email}/get"><b>getAliasesByEmail</b></a> method may return the current status of aliases within up to 60 seconds following a correctly performed transaction.</div>



       # How to register an alias for use in 1-click payment?

       Transaction may process with <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1chargeByCode/post"><b>paymentMethod/blik/chargeByCode</b></a> method. The service allows to assign individual alias value and alias label value in input parameters.

       If parameter <b>“referenceRegister” = true</b> during transaction registration process, the Alias registration request is transferred to BLIK and the Customer receives an invitation generated by the bank application to pay without the T6 code, in the merchant’s system.


       Once this method is called, the amount provided during transaction registration is charged and alias is registered in P24/BLIK system.


       Created alias may be used for processing OneClick payments.


       Once the alias is registered, the Customer will not be asked to provide T6 code during the next payments.<br><br><br>


       <img src="get.php?file=eng_blik_rejestracja_aliasu.png" alt="Blik" class="center smallImg"><br><br><br>


        <div id="note">In order to register another mobile application in BLIK system, method <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1chargeByCode/post"><b>paymentMethod/blik/chargeByCode</b></a> should be used with a 6-digit BLIK code generated by the application. The transaction in P24 must be registered on the same customer’s e-mail address.</div>

        <br>

        <div id="note">The alias is created based on the e-mail address provided during transaction registration process. This means that only one alias of a given type may be registered on this e-mail address unless “aliasValue” and “aliasLabel” parameters are used.</div>

        <br>

        <div id="note">In order to register more than one alias for provided e-mail address, include the alias value and alias label. This way merchant would assure that aliases are unique. The list of merchant’s aliases for a given e-mail may be obtained by <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1getAliasesByEmail~1{email}/get"><b>getAliasesByEmail</b></a> method. It is possible to register the same alias defined by the merchant with several e-mail addresses. In this case, <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1getAliasesByEmail~1{email}/get"><b>getAliasesByEmail</b></a> returns the same alias value for each e-mail.</div>


        # How to make a 1-click payment (only 1-click)?

        <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1chargeByAlias/post"><b>ChargeByAlias</b></a> is a one click payment method. It allows to charge customer using a previously obtained alias. Alias obtained must be provided in <i><b>methodRefId</i></b> parameter during transaction registration (<a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>transaction/register</b></a>). Please use <i><b>type=alias</i></b>.<br><br><br>


        <img src="get.php?file=eng_blik_platnosc_z_aliasem.png" alt="Blik" class="center smallImg"><br>


        # How to handle two registered applications for one alias (only 1-click)?

        The method <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1chargeByAlias/post"><b>ChargeByAlias</b></a> allows to charge customer using previously obtained alias and an <b><i><b>“alternativeKey”</b></b></i> key identifying customer’s mobile application. Additional
        parameter <i><b>"alternativeKey"</b></i> is used.<br><br>
        This method may be used only if
        <b>chargeByAlias</b> method returns „alias” type with error code 51 and
        http code 409 (the alias selected for the identification is ambiguous!) as well as the list of alternative
        keys identifying the customer’s mobile applications – <i><b>"AliasAlternative"</b></i>.
        <br><br>
        The customer should select proper mobile application as a payment method. Alias should be selected from
        the <i><b>"AliasAlternative"</b></i> list.
        <br><br>
        This method is used with the
        <i><b>"alternativeKey"</b></i>  type, only if the customer has more that one mobile
        application linked to the same UID type alias.
        <br><br>
        In case of receiving error 51, merchant should not record alternative keys and labels. These data are
        subject to change at the bank – by user in the bank application.<br><br><br>

        <img src="get.php?file=eng_blik_2app_1alias.png" alt="Blik" class="center smallImg"><br>


        # How to handle with an expired token? (only 1-click)

        <!-- The method <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1chargeByAlias/post"><b>ChargeByAlias</b></a> allows to charge customer using previously obtained alias and
         6-digit BLIK code generated by the user’s bank application.
        <br><br>
        The method should be used with the <i><b>"blikCode"</b></i> in the following cases:
        <br><br>
        1. Transaction is rejected due to error 68 (customer’s alias expired).
        <br><br>
        2. The customer forces payment with BLIK code (e.g. customer wants to register the existing alias with
        a different application/bank). In this case, a 6 digit BLIK code should be entered in order to
        authenticate the alias.<br><br> <img src="get.php?file=eng_blikplatnosc_ponowna_t6.png" alt="Blik" class="center smallImg"><br> -->

        When a transaction is rejected due to error 68 (customer’s alias expired), you must re-register the transaction with a new alias - according to the information in section
        <a href="#section/How-to-register-an-alias-for-use-in-1-click-payment"><b>register an alias</b></a>.<br>


        <img src="get.php?file=eng_blik_wygasniecie_aliasu.png" alt="Blik" class="center smallImg"><br>


       # Transfer title visible in the client's application?

       By default a client in their bank application sees the P24 transaction number as the main title. Additional lines also show the information passed in the <b>description</b> parameter in the <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>transaction/register</b></a> request, as an auxiliary value.<br><br>
       The customer could see personalized value sent by the merchant instead of the main P24 transaction title. In this case, the <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>transaction/register</b></a> request should contain the <b>transferLabel</b> parameter, which rewrites the main payment title.<hr>


  - name: BLIK Additional
    x-displayName: BLIK Additional Notification
    description: >
      For any of BLIK type transaction, additional payment status notification is provided.<br><br>
      Notification is sent to the url given in the <b>"urlCardPaymentNotification"</b> parameter, which must be added to the<a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b> transaction/register </b></a>method, or to a fixed address saved in the P24 account configuration. The value from the token, if it was sent, is paramount.


      <SchemaDefinition schemaRef="#/components/schemas/bliknotification" />
  - name: Alias Update Notification
    x-displayName: Alias Update Notification
    description: >
     Additional notification may be sent to the specified URL, if the alias status is created or changed. The address is configured via the P24 service. The notification can be used as an alternative to the <a href="#tag/BLIK-API/paths/~1api~1v1~1paymentMethod~1blik~1getAliasesByEmail~1{email}/get"><b>getAliasesByEmail</b></a> method.

      <SchemaDefinition schemaRef="#/components/schemas/blikadnotification" />
####END BLIK####

####CARD####
  - name: Card Description
    x-displayName: Card Use Cases
    description:  >


      <h2>Introduction</h2>


      To implement standard card transactions processed via P24 paymentwall, it is enough to perform standard integration (payment service) and there is no need to implement the following solutions. The solutions described below are additional card functionalities.


      <div id="note">
      
      Card featuers are not enabled by deufalt, the scope of the card functionality and testing methods depend on the Acquirer. Please contact the support stuff (support@przelewy24.pl) to learn more.

      </div>


      # How to make in-shop card payment

      In order to limit the number of steps in the payment process, it is possible to place the payment card form directly on the shop’s website. The implementation of the solution does not affect the processing of the credit card data – it is still run solely by Przelewy24, which allows to preserve all the safety requirements regarding the security of credit cards and to conform to the PCI DSS standard.


      <img src="get.php?file=ENG2_WHITE_LABEL_1_15.png" alt="Card Payment" class="center smallImg">




      In order to carry out payments by payment cards, it is necessary to use the<a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b> transaction/register </b></a>method in order to register transaction in Przelewy24 and, subsequently, transfer the received transaction token for the call made by Przelewy24 JavaScript. The data provided in the form are transferred directly to Przelewy24, and, as a result, script on the shop’s part (indicated in the configuration) is activated.


      <div id="note"> A suitable contract is necessary for realisation of payments by payment cards on the shop’s website – please contact the Sales Department of Przelewy24 (partner@przelewy24.pl , +48 61 642 93 45). </div>



      <h2>In-shop card payment process </h2>


      <img src="get.php?file=en_inshop_card_payment.png" alt="Card payment" class="center smallImg"><br/><br/>


      - Transaction registration by<a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b> transaction/register </b></a>method, obtaining of a transaction token

      - Building DIV element on the merchant’s website for card payment form

      - Preparation of the JavaScript code which will be called on completion of the transaction


      <h2> Field for card payment form </h2>

      DIV element may be used to prepare the location on the website where the card payment form should be placed. The ID attribute of this element should be set to "P24FormContainer". Code should look as follow:


      ```html
        <div
          id="P24FormContainer"
          data-sign="{P24SIGN}"
          data-successCallback="{FinishPaymentFunction}"
          data-failureCallback="{PaymentErrorFunction}"
          data-dictionary='{DICTIONARY JSON}' >
        </div>
      ```


      Where:

      - {P24SIGN} – checksum, the same as the one used in <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>transaction/register</b></a>

      - {FinishpaymentFunction} – name of function called in case of a correct transaction with one input parameter – OrderID (integer) assigned by P24,

      - {PaymentErrorFunction} – name of function called in case of an incorrect transaction, the function returns one parameter  - error code (integer),

      - {DICTIONARY JSON} – dictionary of terms used in the payment form, as stated below:


      <SchemaDefinition schemaRef="#/components/schemas/cardpayjson" />


      A script generating internal form in DIV#P24FormContainer should be attached to the website:

      <table border="0 px">
        <tr>
          <th bgcolor = "#0f6ab4"><font color = "white"><b>GET</b></font></th>
          <th bgcolor = "E7F0F7"><a href= 'https://secure.przelewy24.pl/inchtml/ajaxPayment/ajax.js?token={TOKEN}'>https://secure.przelewy24.pl/inchtml/ajaxPayment/ajax.js?token={TOKEN}</a></th>
        </tr>
      </table>

      Where the Token obtained as a result of the <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>transaction/register</b></a> method should be entered in {TOKEN}. Alternatively, individual CSS for the card registration form may be used.

      <br>URL for default styles:<br/>


      <a href="https://secure.przelewy24.pl/inchtml/ajaxPayment/ajax.css">https://secure.przelewy24.pl/inchtml/ajaxPayment/ajax.css</a>


      In case of 3D-Secure required, link redirecting to new authorisation window will appear. After successful authorisation window will be closed and function for correct transaction will be called.

      The return address provided in <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>"urlReturn"</b></a> parameter should lead to the script placed in the same domain as the request script. It should enable the following function:

      ```javascript
        window.setTimeout(function(){
        opener.P24_Transaction.threeDSReturn(window);
        window.close();
        },1000);
      ```


      # How to register a card or make a payment?

      1. The card registration should be made as a normal payment.

      Card payment can be made in 3 ways:

        - <a href="#section/Payment-system"><b>p24 paymentwall</b></a>

        - <a href="#tag/Card-API/paths/~1api~1v1~1card~1pay/post"><b>direct API (card / pay)</b></a> - if card data is processed by Merchant resources, the solution requires PCI DSS
        <img src="get.php?file=ENG_white_label_MOBILE_3_a_1.png" alt="Card Payment" class="center smallImg">


        - <a href="#section/How-to-make-in-shop-card-payment"><b>form inside the store </b></a>

        <img src="get.php?file=ENG2_WHITE_LABEL_1_15.png" alt="Card Payment" class="center smallImg">



      2. Then, by<a href="#tag/Card-API/paths/~1api~1v1~1card~1info~1{orderId}/get"><b> card/info </b></a> or <a href="#tag/Card-Notification"><b>additional notification</b></a>, you can get information about the card, including the reference number necessary for subsequent charges.


      3. Then, depending on whether we want to accept the payment, we perform <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1verify/put;"><b> transaction/verify </b></a> or <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1verify/put"><b> transaction/verify </b></a> followed by <a href="#tag/Additional-API-functionality/paths/~1api~1v1~1transaction~1refund/post"><b> transaction/refund</b></a>, if it was only a sample payment, e.g. for PLN 1.

      <img src="get.php?file=en_inshop_card_payment.png" alt="card pay" class="center smallImg">


      # How to get card information?


      There are two ways to get information about a card:

        - Use method <a href="#tag/Card-API/paths/~1api~1v1~1card~1info~1{orderId}/get"><b> card/info </b></a>

        - Use <a href="#tag/Card-Notification"><b>additional notification</b></a>


      The notification can be used for any card transactions:

        - in the <a href="#tag/Card-API/paths/~1api~1v1~1card~1chargeWith3ds/post"><b>card/chargeWiths3ds</b></a>, <a href="#tag/Card-API/paths/~1api~1v1~1card~1charge/post"><b>card/charge</b></a>, <a href="#tag/Card-API/paths/~1api~1v1~1card~1pay/post"><b>card/pay</b></a> processes for immediately displaying a message to a customer about a successful / failed transaction

        - in the RISK process on the part of the Partner to check the client's card and protect against fraud

        - when saving the card to the 1-click process, there is no need to ask for the card reference number



      <img src="get.php?file=ENG_ONE_CLICK_4__1.png" alt="OneClick" class="center smallImg"><br><br>


      Card reference number must be provided during transaction registration in <b>methodRefId</b> parameter.<br><br>


       <img src="get.php?file=eng_1_click.png" alt="OneClick" class="center smallImg">


      # How to make a 1-click card payment with 3DS?

      The dedicated <a href="#tag/Card-API/paths/~1api~1v1~1card~1chargeWith3ds/post"><b>card/chargeWith3ds</b></a> method is used for this purpose.<br><br>
      Card reference number must be provided during transaction registration in <b>methodRefId</b> parameter.<br><br>
      The method will return a link to redirect the client and handle 3ds.<br><br>
      <img src="get.php?file=ENG_ONE_CLICK_4__1.png" alt="OneClick" class="center smallImg"><br><br>


      <img src="get.php?file=eng_1_click_3ds.png" alt="OneClick 3ds" class="center smallImg">



      # How to handle payments without customer participation (recurring)?

      The method <a href="#tag/Card-API/paths/~1api~1v1~1card~1charge/post"><b>card/charge</b></a> enables recurrent card charging based on transferred reference number. <br><br>
      Card reference number must be provided during transaction registration in <b>methodRefId</b> parameter<br><br>
      Customer’s participation is not required to initiate the process.<br><br>


      <img src="get.php?file=eng_1_click_recurringv1.png" alt="Recurring Charge" class="center smallImg">

      <br><br>

      <img src="get.php?file=ENG_ONE_CLICK_4__1.png" alt="OneClick" class="center smallImg"><br><br>



      # How to handle 3ds (including 3ds 2.X)?

      Both 3ds and 3ds 2.X are handled in the same way. 3ds is handled automaticlly for solutions based on <a href="#section/Payment-system"><b>p24 paymentwall</b></a> or form inside the store. Merchant doesn't have to do anything.
      <br><br>
      In case using <a href="#tag/Card-API/paths/~1api~1v1~1card~1pay/post"><b>card/pay</b></a> or <a href="#tag/Card-API/paths/~1api~1v1~1card~1chargeWith3ds/post"><b>card/chargeWith3ds</b></a> method for this purpose, you should redirect customer to the URL obtained from the answer.<br><br>
      Remember that after 3ds, the client will always be redirected to <b>urlReturn</b>. Merchant must process customer’s return from the bank website on their own. The returned link is active for 15 minutes.<br><br>


      # How to register a card or pay in a mobile application?

      Card registration or payment in the mobile application can be done in two suggested ways. You can open a <a href="#section/Payment-system"><b>p24 paymentwall</b></a> in WebView, preferably with forced payment method for given cards. Another way is to use the <a href="#tag/Card-API/paths/~1api~1v1~1card~1pay/post"><b>card/pay</b></a> method. Remember that the <a href="#tag/Card-API/paths/~1api~1v1~1card~1pay/post"><b>card/pay</b></a> method should be called directly from the application to P24 without the participation of Merchant servers. Otherwise, you'll need a PCI DSS certificate.

      # Will the Merchant process full card details?

      PCI DSS certification is required to process full card data. P24 solutions support operations performed this way.<br><br>
      However, many solutions provide full card functionality, in which Merchant doesn't use full card data and therefore is no need to have PCI DSS. In such situations, Merchant only obtains the card's reference number (e.g. for later 1-click payments or recurring charges) and a set of insensitive data such as expiration date or BIN.<br><br><hr>

  - name: Card Notification
    x-displayName: Card Additional Notification
    description:  >

         Notification is sent to the url given in the <b>"urlCardPaymentNotification"</b> parameter, which must be added to the<a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b> transaction/register </b></a>method, or to a fixed address saved in the P24 account configuration. The value from the token, if it was sent, is paramount.<br/><br/>

          **For positive authorization**

          <SchemaDefinition schemaRef="#/components/schemas/CardNotificationExt" />

          **For negative authorization**

          <SchemaDefinition schemaRef="#/components/schemas/CardNotificationExtN" />
####END CARD####

####GPAY####
  - name: GPay Description
    x-displayName: Google Pay Description
    description:  >

     <img src="get.php?file=Gpay_logo.png" alt="GPay" class="center smallImg">




      Google Pay is fast and simple method of payments offered by Google. Card details are safely stored on Google servers. Service allows users to perform the payment process without manually filling card details or contact form.
      <br><br>
      Google Pay allows to obtain the customer’s encrypted card details which are required to charge it. In order to proceed Google Pay payment, customer first must save payment card details in Google account using any Google platform (e.g. purchasing an application in Google Play, paying for storage on Google Drive, etc.) or directly on  <a href="https://pay.google.com">https://pay.google.com</a>
      <br><br>
      <div id="note"> In order to use the service, a relevant contract with the card operator must be signed first. To enable this functionality, contact Partner Support: partner@przelewy24.pl, tel. +48 61 642 93 45.</div><br>

      <img src="get.php?file=ONE_CLICK_33.png" alt="GPay" class="center smallImg">

     ## Communication scheme
        Once the customer clicks „Pay with Google Pay” button, the Google Pay form is displayed. This form allows customer to confirm Google account and choose card to be used for payment process. At this stage card may be changed to a different one (previously saved) or new card may be added. Google Pay script displays encrypted card details using postMessage function which the shop must intercept, encrypt once again using the base64 function and send in <b>"methodRefId"</b> parameter along with the transaction data.<br><br>
        Merchant’s system may call the script available on Google’s website. Details available at&#x3A;<br><br>
        <a href=https://developers.google.com/pay/api/web/guides/tutorial>https://developers.google.com/pay/api/web/guides/tutorial</a><br><br>
        In order to add P24, it is necessary to modify the processor’s data in the script call&#x3A;

        ```javascript
          var tokenizationSpecification =
          {
          tokenizationType: 'PAYMENT_GATEWAY',
          parameters:
            {
              gateway: 'przelewy24',
              gatewayMerchantId: '[MerchantID from P24]'
            }
          }
        ```
      ## Transaction registration
        In order to register Google Pay transaction, additional <b>"methodRefId"</b> parameter must be used. The parameter can be obtained from Google by **postMessage (paymentMethodToken.token)** and should be encrypted with base64 encryption.

        <table border="0 px">
          <tr>
            <th bgcolor = "#9FFF9F"><font color = "black"><b>POST</b></font></th>
            <th bgcolor = "#B8F0D0"><a href= 'https://secure.przelewy24.pl/api/v1/transaction/register'>https://secure.przelewy24.pl/api/v1/transaction/register</a></th>
          </tr>
          </table>

        Additional **POST** call parameter

        | Field name   |      Type      |  Required | Description |
        |--------------|:--------------:|----------:|------------:|
        | methodRefId  |     STRING     | Y     |Token obtained from Google Pay and encrypted with base64 |

        Before sending the transaction request, transaction data must be saved in the merchant’s local database. In particular, the session ID and the transaction amount should be stored.
      ## Implementation for Android
        To implement Google Pay on Android devices see Google Pay API documentation:
        [https://developers.google.com/pay/api/android](https://developers.google.com/pay/api/android)

      ## Additional information
        In order to unify styles of website and mobile applications, a set of guidelines has been made available.
        [https://developers.google.com/pay/api/web/guides/brand-guidelines](https://developers.google.com/pay/api/web/guides/brand-guidelines)

        Guidelines for creating mobile applications are available at:
        [https://developers.google.com/pay/api/android/guides/tutorial](https://developers.google.com/pay/api/android/guides/tutorial)

    x-codeSamples:
        - lang: javascript
          source: |
            <head>
              <meta charset="UTF-8">
              <meta name="viewport"
                    content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
              <meta http-equiv="X-UA-Compatible" content="ie=edge">
              <title>PayWithGoogle</title>
              <script src="https://secure.przelewy24.pl/bundle/payWithGoogle/{{TOKEN}}"></script>
            </head>
            <body>
            <script>
              document.addEventListener("DOMContentLoaded", function () {
                  Przelewy24PayWithGoogle.config({
                      errorCallback: function () {
                          alert("error");
                      },
                      exceptionCallback: function () {
                          alert("exception");
                      },
                      requestFailedCallback: function () {
                          alert('requestFailed');
                      },
                      completePaymentCallback: function () {
                          alert("success");
                      }
                  });
                  Przelewy24PayWithGoogle.charge();
              });
            </script>
            </body>
  - name: GPay API
    x-displayName: Google Pay API
####END GPAY####

####APAY####
  - name: APay Description
    x-displayName: Apple Pay
    description:  >


      <img src="get.php?file=Apple_Pay.png" alt="ApplePay" class="center smallImg">

      <h2>Introduction</h2>
      Thanks to Apple Pay, you don't have to set up any accounts or fill out long forms when shopping on websites opened in Safari on your iPhone, iPad or Mac. And because the Touch ID reader is also available in the MacBook Air and MacBook Pro, finalizing the transaction requires only a fingerprint and is faster, easier and safer than before.<br><br>


      <img src="get.php?file=ENG_white_label_MOBILE_6_a_1.png" alt="APay" class="center smallImg">





      ## Description

      During the shopping process, Apple Pay uses the number assigned to a specific device and a unique transaction code. As a result, your card number is never stored on your device or Apple servers. And at the time of payment, Apple never makes card numbers available to sellers.

      <div id="note">The service requires prior signing of the contract with the card operator, for detailed information please contact the Sales Department of Przelewy24).</div>


      ## Creating Merchant ID And Domain Certification

      Transaction processing via ApplePay requires the Seller to create a merchant and pass domain certification. The process is described at <a href="https://developer.apple.com/documentation/apple_pay_on_the_web/configuring_your_environment">https://developer.apple.com/documentation/apple_pay_on_the_web/configuring_your_environment</a>.


      ## Creating Apple Pay Payment Processing Certificate

      <div id="note">Before proceeding with the process of creating a certificate, obtain a CSR file (for detailed information, please contact the Implementation Department of Przelewy24 integracja@przelewy24.pl).</div>
      <br>
      After logging in to your Apple Developer account:


      - select the Certificates, IDs & Profiles option,

      - select the Identifiers / Merchant IDs option,

      - select the Merchant ID created in the previous step and go to the Edit option,

      - select the Create Certificate option in the Apple Pay Payment Processing Certificate section,

      - select the Continue option,

      - upload the CSR file received from the Przelewy24 Implementation Department, using the Choose File option,

      - download the generated certificate and forward it to the Przelewy24 Implementation Department.


      ## Communication Scheme

      After clicking the "ApplePay" button, the Apple form appears on the screen, where the user can select a card saved on the device. The background script passes the encoded card data in the paymentData object, which the store must take over, and then encode via base64 again and send it in the <b>methodRefId</b> parameter together with the transaction data. The store on its website must call the script provided by Apple (details available at <a href="https://developer.apple.com/documentation/apple_pay_on_the_web">https://developer.apple.com/documentation/apple_pay_on_the_web</a>). The background script passes the encoded card data, which the store must take over, and then encode via base64 again and send it in the <b>methodRefId</b> parameter together with the transaction data.

      ## Transaction Registration

        In order to register Apple Pay transaction, additional <a href="#tag/Transaction-service-API/paths/~1api~1v1~1transaction~1register/post"><b>"methodRefId"</b></a> parameter must be used. The parameter can be obtained from Apple by **postMessage (paymentMethodToken.token)** and should be encrypted with base64 encryption.

        <table border="0 px">
          <tr>
            <th bgcolor = "#9FFF9F"><font color = "black"><b>POST</b></font></th>
            <th bgcolor = "#B8F0D0"><a href= 'https://secure.przelewy24.pl/api/v1/transaction/register'>https://secure.przelewy24.pl/api/v1/transaction/register</a></th>
          </tr>
        </table>

        Additional **POST** call parameter

        | Field name   |      Type      |  Required | Description |
        |--------------|:--------------:|----------:|------------:|
        | methodRefId  |     STRING     | Y     |Token obtained from Apple Pay and encrypted with base64 |

        ## Additional Information

        To harmonize the style used on the website and in the mobile application, some tips should be followed when implementing the ApplePay service. Descriptions of styles and buttons for websites are available at <a href="https://developer.apple.com/apple-pay/acceptable-use-guidelines-for-websites/">https://developer.apple.com/apple-pay/acceptable-use-guidelines-for-websites/</a>.
  - name: APay API
    x-displayName: Apple Pay API
####END APAY####

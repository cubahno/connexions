{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Connexions Documentation","text":"<p>Connexions allows to define single response for any arbitrary path on the fly.</p>"},{"location":"#goals","title":"Goals","text":"<ul> <li>provide a simple tool to work with API mocks</li> <li>combine multiple APIs into one</li> <li>generate meaningful responses</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Using upstream services with circuit breaker</li> <li>Randomized response contents, allowing you to redefine the response for any path</li> <li>Modify response contents on the fly by providing custom middleware functions</li> <li>Mimic error responses and status codes</li> <li>Configurable latency in responses</li> </ul>"},{"location":"#simple-start","title":"Simple start","text":"<pre><code>docker run -it --rm \\\n  -p 2200:2200 \\\n  -v connexions:/app/resources/data \\\n  cubahno/connexions api\n</code></pre>"},{"location":"contexts/","title":"Contexts","text":"<p>Contexts are organized in YAML files which act more like namespaces or collections of contexts. Usually, file names should correspond to the name of the service or the domain. For example, <code>payments</code>, or <code>petstore</code>.</p> <p>On the filesystem, contexts stored with the provided name and <code>yml</code> extension in the <code>contexts</code> directory. For example, <code>contexts/payments.yml</code>.</p> <p>Only individual primitive properties replaced during content generation. So, you cannot substitute property with an object or a list.</p>"},{"location":"contexts/#contexts-structure","title":"Contexts structure","text":"<p>Inside the context file you should provide the data that corresponds to your schema. For example, if you have an OpenAPI schema with the following structure:</p> <pre><code>Pet:\n  type: object\n  properties:\n    id:\n      type: string\n      format: uuid\n    name:\n      type: string\n    tag:\n      type: string\n</code></pre> <p>Our <code>petstore.yml</code> context file could look like this: <pre><code>id: 123e4567-e89b-12d3-a456-426614174000\nname: \"doggie\"\ntag: \"dog\"\n</code></pre></p> <p>So, in case of <code>json</code> response, the replacement will look like this: <pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"name\": \"doggie\",\n  \"tag\": \"dog\"\n}\n</code></pre></p> <p>Any Schema that has these properties will be replaced with the provided values. So, the provided context is more like hardcoded-values.</p> <p>Let's look at another Schema with nested properties:</p> <pre><code>PetWithOwner:\n  type: object\n  properties:\n  pet:\n    type: object\n    properties:\n      id:\n        type: string\n        format: uuid\n      name:\n        type: string\n      tag:\n        type: string\n    ownerPerson:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n</code></pre> <p>It's clear that using name as <code>doggie</code> is not ideal here. Our context file could look like this:</p> <pre><code>pet:\n  id: 123e4567-e89b-12d3-a456-426614174000\n  name: \"doggie\"\n  tag: \"dog\"\nowner_person:\n  id: 1\n  name: \"Jane Doe\"\n</code></pre> <p>The keys inside context files should be <code>snake_case</code>.</p> <p>Our response would look like: <pre><code>{\n    \"pet\": {\n        \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"name\": \"doggie\",\n        \"tag\": \"dog\"\n    },\n    \"owner_person\": {\n        \"id\": 1,\n        \"name\": \"Jane Doe\"\n    }\n}\n</code></pre></p>"},{"location":"contexts/#dynamic-keys-and-values","title":"Dynamic keys and values","text":"<p>We use the <code>fake</code> library to generate random values. You can use it inside your context files to generate dynamic values: <pre><code>pet:\n  id: \"fake:uuid4\"\n  name: \"fake:pet.name\"\n  tag: \"fake:gamer.tag\"\nowner_person:\n  id: \"fake:u_int8\"\n  name: \"fake:person.name\"\n</code></pre></p> <p>All available <code>fakes</code> are shipped with the distribution. <code>contexts/fakes</code> file has the full list.</p> <p>The syntax is <code>fake:path.with.dot</code>.</p> <p>It is possible to use not only dynamic values but dynamic keys as well: <pre><code>_id$: \"alias:fake.u_int8\"\n_email$: \"alias:fake.internet.email\"\n</code></pre></p> <p>Any property in the schema that ends with <code>_id</code>, <code>_email</code>, (in case of camelCase <code>Id</code>, <code>Email</code>) in its name will be replaced with the generated value. For example: <pre><code>{\n  \"userId\": 123,\n  \"userEmail\": \"jane.doe@example.com\"\n}\n</code></pre></p>"},{"location":"contexts/#context-reuse","title":"Context reuse","text":"<p>It is possible to reuse contexts in other contexts. Let's say we have context files with the following content:</p> petstore.yml<pre><code>id: \"fake:uuid4\"\nname: \"fake:pet.name\"\ntag: \"fake:gamer.tag\"\n</code></pre> person.yml<pre><code>id: \"fake:u_int8\"\nname: \"fake:person.name\"\n</code></pre> <p>We can refer to any property in any context file using <code>alias</code> keyword:</p> petstore.yml<pre><code>id: \"fake:uuid4\"\nname: \"fake:pet.name\"\ntag: \"fake:gamer.tag\"\nowner_id: \"alias:person.id\"\nowner_name: \"alias:person.name\"\n</code></pre> person.yml<pre><code>id: \"fake:u_int8\"\nname: \"fake:person.name\"\npet_id: \"alias:petstore.id\"\npet_name: \"alias:petstore.name\"\n</code></pre> <p>The syntax is <code>alias:&lt;context-file&gt;.&lt;dotted.path&gt;</code>. Some commonly used alias located in <code>contexts/common</code> file </p> <p>If the <code>alias</code> won't point to any target property, it will be used as-is, so you can notice the issue.</p>"},{"location":"contexts/#other-keywords","title":"Other keywords","text":"<p>Along with <code>alias</code> and <code>fake</code> keywords, there are some other keywords that can be used in context files.</p>"},{"location":"contexts/#botify","title":"<code>botify</code>","text":"<p>Replaces value with the letters <code>???</code> and the number <code>###</code>. For example, <pre><code>password: \"botify:???###\"\n</code></pre> will produce a string like <code>abc123</code>.</p>"},{"location":"contexts/#func","title":"<code>func</code>","text":"<p>Allows to use custom functions to generate values. There are currently no such functions but they can appear here when needed.</p>"},{"location":"contexts/#predefined-values","title":"Predefined values","text":"<p>To replace property only with predefined set of values we can use list of values instead of single value.</p> person.yml<pre><code>name: [\"Jane\", \"John\"]\n</code></pre> <p>or  <pre><code>name:\n    - \"Jane\"\n    - \"John\"\n</code></pre> both notations are valid YAML. Random value will be picked from a list in this case.</p>"},{"location":"contexts/#path-and-headers","title":"Path and Headers","text":"<p>Values replacement for <code>path</code> and <code>headers</code> can be used with different dedicated context.</p> <pre><code>in-path:\n  pet_id: \"alias:fake.u_int8\"\n  id$: \"alias:fake.u_int8\"\n\nin-header:\n  x_pet_name: \"alias:fake.pet.name\"\n</code></pre> <p>These contexts will takes precedence over the default context replacements. The <code>in-</code> prefix can be changed in the <code>config.yml</code> file: <pre><code>app:\n  # ...\n  contextAreaPrefix: \"in-\"\n</code></pre></p>"},{"location":"contexts/#wiring","title":"Wiring","text":"<p>The filenames are completely arbitrary, and there's no magic involved in regards to which contexts are used for any particular service. You need to set the corresponding configuration manually in the config file or using the UI. Each distribution ships with the defaults contexts, in case there's no configuration for service provided - default will be used.</p> <p>Let's say we have a <code>petstore</code> service and 2 contexts:</p> fake.yml<pre><code>pet:\n  dog: \"fake:\"\n  cat: \"fake:\"\n  name: \"fake:\"\npayments:\n  # ... mappings\npeople:\n  # ... mappings\n</code></pre> person.yml<pre><code>id: \"fake:u_int8\"\nname: \"fake:person.name\"\n</code></pre> <p>Fake file is unnecessary big, we can use just a portion of it: config.yml<pre><code>services:\n  petstore:\n   # the name of the context to use when substituting the values in the request/response.\n    contexts:\n      - fake: pet\n      - fake: people\n      - person:\n</code></pre></p> <p>Only 2 maps will be taken from <code>fake</code> context and complete <code>person</code> context will be used. Replacement will be applied in the order of definition.</p>"},{"location":"contexts/#using-in-fixed-responses","title":"Using in Fixed Responses","text":"<p>Contexts can be used in fixed responses as well. Fixed response is the file with contents that you provided, usually with a <code>json</code> contents, for example: <pre><code>{\n  \"id\": 123,\n  \"name\": \"doggie\",\n  \"tag\": \"dog\"\n}\n</code></pre></p> <p>In order to use contexts in fixed responses, we would need to wrap the values in <code>{}</code> brackets regardless of the value type. <pre><code>{\n  \"id\": \"{id}\",\n  \"name\": \"{name}\",\n  \"tag\": \"{tag}\"\n}\n</code></pre></p> <p>With a context of: <pre><code>id: 123\nname: \"doggie\"\n</code></pre></p> <p>it will be replaced with: <pre><code>{\n  \"id\": 123,\n  \"name\": \"doggie\",\n  \"tag\": \"some-string-value\"\n}\n</code></pre></p> <p>The types will be correctly resolved as well: <code>id</code> is unsigned int8.</p> <p>It's possible to use multiple placeholders in a single value: <pre><code>{\n  \"id\": 123,\n  \"nameWithId\": \"{name}-{id}\"\n}\n</code></pre></p> <p>will be replaced with: <pre><code>{\n  \"id\": 123,\n  \"nameWithId\": \"doggie-123\"\n}\n</code></pre></p>"},{"location":"example-docker-compose/","title":"Docker-Compose","text":"<p>Usage in <code>docker-compose</code> is not much different from the docker. </p> docker-compose.yml<pre><code>version: '3'\nservices:\n  api:\n    image: cubahno/connexions\n    ports:\n      - \"8080:2200\"\n\n  client:\n    image: curlimages/curl:latest\n    command: [\"tail\", \"-f\", \"/dev/null\"]\n    depends_on:\n      - api\n</code></pre> <pre><code>docker-compose exec client curl http://api:2200/petstore/pets\n</code></pre> <p>Map the volumes and directories accordingly.</p>"},{"location":"example-docker/","title":"Docker","text":""},{"location":"example-docker/#fast-track","title":"Fast track","text":"<p>This will start Connexions with a default configuration, sample <code>petstore</code> API and contexts. Data persisted in the <code>connexions</code> volume.</p> <pre><code>docker run -it --rm \\\n  -p 2200:2200 \\\n  -v connexions:/app/resources/data \\\n  cubahno/connexions api\n</code></pre>"},{"location":"example-docker/#build-your-own-image","title":"Build your own image","text":"<p>Build your custom Connexions image with your own data and contexts. Check directory examples/docker-image-builder  for full working example with files.</p> examples/docker-image-builder/Dockerfile<pre><code>FROM cubahno/connexions:v0.1.27\n\n# remove not needed stuff\nRUN rm -rf /app/resources/data/services\nRUN rm -rf /app/resources/ui\n\n# copy your service definitions, contexts and config\nCOPY services /app/resources/data/services\nCOPY contexts /app/resources/data/contexts\nCOPY middleware /app/resources/data/middleware\nCOPY config.yml /app/resources/data/config.yml\n\n# optimize openapi specs for better performance:\n# - removes circular references\n# - removes unused properties\n# - merges all $refs\nRUN simplify-schemas src=/app/resources/data/services replace=true\n\n# done\n</code></pre> <pre><code>docker build . -t my-connexions\n</code></pre> <p>Run it:</p> <pre><code>docker run -it --rm \\\n  -p 2200:2200 \\\n  my-connexions api\n</code></pre> <p>Login to the container to observe the data and contexts:</p> <pre><code>docker run -it --rm my-connexions bash\n</code></pre>"},{"location":"example-docker/#serve-from-directory","title":"Serve from directory","text":"<p>Connexions resources file structure: <pre><code>resources\n    \u2514\u2500\u2500\u2500 data\n        \u2514\u2500\u2500\u2500services\n            \u2514\u2500\u2500\u2500openapi\n                \u2514\u2500\u2500\u2500service-1\n                    \u2514\u2500\u2500\u2500index.yml\n            \u2514\u2500\u2500\u2500root\n                \u2514\u2500\u2500\u2500get\n                    \u2514\u2500\u2500\u2500index.json\n            \u2514\u2500\u2500\u2500service-2\n                \u2514\u2500\u2500\u2500patch\n                    \u2514\u2500\u2500\u2500users\n                        \u2514\u2500\u2500\u2500index.json\n        \u2514\u2500\u2500\u2500middleware\n            \u2514\u2500\u2500\u2500foo.go\n            \u2514\u2500\u2500\u2500bar.go\n        \u2514\u2500\u2500\u2500contexts\n            \u2514\u2500\u2500\u2500service-1.yml\n            \u2514\u2500\u2500\u2500service-2.yml\n</code></pre></p> <p>Directory pattern</p> <p>For <code>non-openapi</code> services, the pattern is:  <code>&lt;service-name&gt;/&lt;method&gt;/&lt;path&gt;/&lt;file-name-with-extension&gt;</code> or  <code>&lt;service-name&gt;/&lt;method&gt;/&lt;path&gt;/index.json</code> to serve <code>/path</code> resource. </p> <p>See File structure for more details.</p> <ol> <li>Create a directory for your services</li> <li>Create a file with a name <code>index.json</code> in there and some contents</li> <li>Run:</li> </ol> <pre><code>docker run -it --rm \\\n  -p 2200:2200 \\\n  -v /path/to/your/data:/app/resources/data \\\n  cubahno/connexions api\n</code></pre> <ol> <li>Open <code>http://localhost:2200</code> in your browser to see the served <code>index.json</code> contents</li> </ol> <p>The example above didn't map contexts directory</p> <p>Contexts are essential part to generate meaningful responses. See Contexts for more details.</p>"},{"location":"example-docker/#pre-built-image-with-payment-service-providers","title":"Pre-built image with Payment Service Providers","text":"<p>Build your custom Connexions image with your own data and contexts. Check directory examples/docker-image-builder for full working example with files.</p> <p>Run it:</p> <pre><code>docker run -it --rm \\\n  -p 2200:2200 \\\n  cubahno/connexions-psp api\n</code></pre> examples/docker-with-psp/Dockerfile<pre><code>FROM cubahno/connexions:latest\n\n# clean start\nRUN rm -rf /app/resources/data/services\nRUN rm -rf /app/resources/data/contexts/petstore.yml\n\n# get remote specs and\n# optimize them to replace circular references and to improve performance:\n\n# paypal\nRUN \\\n    wget -P /app/resources/data/services/openapi/paypal/ https://raw.githubusercontent.com/paypal/paypal-rest-api-specifications/main/openapi/payments_payment_v2.json &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/paypal/ https://raw.githubusercontent.com/paypal/paypal-rest-api-specifications/main/openapi/invoicing_v2.json &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/paypal/ https://raw.githubusercontent.com/paypal/paypal-rest-api-specifications/main/openapi/checkout_orders_v2.json &amp;&amp; \\\n    simplify-schemas --src=/app/resources/data/services/openapi/paypal/ --replace=true\n\n# adyen\nRUN \\\n    wget -P /app/resources/data/services/openapi/adyen/ https://raw.githubusercontent.com/Adyen/adyen-openapi/main/yaml/AccountService-v6.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/adyen/ https://raw.githubusercontent.com/Adyen/adyen-openapi/main/yaml/BinLookupService-v54.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/adyen/ https://raw.githubusercontent.com/Adyen/adyen-openapi/main/yaml/CheckoutService-v70.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/adyen/ https://raw.githubusercontent.com/Adyen/adyen-openapi/main/yaml/PaymentService-v68.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/adyen/ https://raw.githubusercontent.com/Adyen/adyen-openapi/main/yaml/RecurringService-v68.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/adyen/ https://raw.githubusercontent.com/Adyen/adyen-openapi/main/yaml/Webhooks-v1.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/adyen/ https://raw.githubusercontent.com/Adyen/adyen-openapi/main/yaml/FundService-v6.yaml &amp;&amp; \\\n    simplify-schemas --src=/app/resources/data/services/openapi/adyen/ --replace=true\n\n# stripe\nRUN \\\n    wget -P /app/resources/data/services/openapi/stripe/ https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.yaml &amp;&amp; \\\n    simplify-schemas --src=/app/resources/data/services/openapi/stripe/ --replace=true --only-required=true\n\n# mobilepay\nRUN \\\n    wget -P /app/resources/data/services/openapi/mobilepay/ https://raw.githubusercontent.com/MobilePayDev/MobilePayDev.github.io/main/openapi/app_payments_api.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/mobilepay/ https://raw.githubusercontent.com/MobilePayDev/MobilePayDev.github.io/main/openapi/invoice.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/mobilepay/ https://raw.githubusercontent.com/MobilePayDev/MobilePayDev.github.io/main/openapi/online.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/mobilepay/ https://raw.githubusercontent.com/MobilePayDev/MobilePayDev.github.io/main/openapi/pos.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/mobilepay/ https://raw.githubusercontent.com/MobilePayDev/MobilePayDev.github.io/main/openapi/reporting.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/mobilepay/ https://raw.githubusercontent.com/MobilePayDev/MobilePayDev.github.io/main/openapi/subscriptions.yaml &amp;&amp; \\\n    wget -P /app/resources/data/services/openapi/mobilepay/ https://raw.githubusercontent.com/MobilePayDev/MobilePayDev.github.io/main/openapi/webhooks.yaml &amp;&amp; \\\n    simplify-schemas --src=/app/resources/data/services/openapi/mobilepay/ --replace=true\n\n# vipps\nRUN \\\n    wget -P /app/resources/data/services/openapi/vipps/ https://raw.githubusercontent.com/vippsas/vipps-recurring-api/master/docs/openapi.yaml &amp;&amp; \\\n    simplify-schemas --src=/app/resources/data/services/openapi/vipps/ --replace=true\n\n# copy your service definitions, contexts and config\nCOPY services /app/resources/data/services\nCOPY contexts /app/resources/data/contexts\nCOPY config.yml /app/resources/data/config.yml\n\n# done\n</code></pre>"},{"location":"fake-list/","title":"List of aliases","text":""},{"location":"fake-list/#reference","title":"Reference","text":"<p>Functions are extracted from jaswdr/faker library to generate dynamic values.</p>"},{"location":"fake-list/#usage","title":"Usage","text":"<p>Use inside curly brackets in your fixed responses, for example: <pre><code>{\n    \"id\": \"{fake:uuid.v4}\",\n    \"name\": \"{fake:person.name}\"\n}\n</code></pre></p>"},{"location":"fake-list/#aliases","title":"Aliases","text":"<pre><code>fake:address.address\nfake:address.building_number\nfake:address.city\nfake:address.city_prefix\nfake:address.city_suffix\nfake:address.country\nfake:address.country_abbr\nfake:address.country_code\nfake:address.latitude\nfake:address.longitude\nfake:address.post_code\nfake:address.secondary_address\nfake:address.state\nfake:address.state_abbr\nfake:address.street_address\nfake:address.street_name\nfake:address.street_suffix\nfake:app.name\nfake:app.version\nfake:beer.alcohol\nfake:beer.blg\nfake:beer.hop\nfake:beer.ibu\nfake:beer.malt\nfake:beer.name\nfake:beer.style\nfake:blood.name\nfake:bool\nfake:boolean.bool\nfake:boolean.bool_int\nfake:car.category\nfake:car.fuel_type\nfake:car.maker\nfake:car.model\nfake:car.plate\nfake:car.transmission_gear\nfake:color.color_name\nfake:color.css\nfake:color.hex\nfake:color.rgb\nfake:color.safe_color_name\nfake:company.bs\nfake:company.catch_phrase\nfake:company.ein\nfake:company.job_title\nfake:company.name\nfake:company.suffix\nfake:crypto.bech32_address\nfake:crypto.bitcoin_address\nfake:crypto.etherium_address\nfake:crypto.p2_pkh_address\nfake:crypto.p2_sh_address\nfake:currency.code\nfake:currency.country\nfake:currency.currency\nfake:currency.currency_and_code\nfake:currency.number\nfake:directory.drive_letter\nfake:emoji.emoji\nfake:emoji.emoji_code\nfake:file.extension\nfake:file.filename_with_extension\nfake:food.fruit\nfake:food.vegetable\nfake:gamer.tag\nfake:gender.abbr\nfake:gender.name\nfake:genre.name\nfake:genre.name_with_description\nfake:hash.md5\nfake:hash.sha256\nfake:hash.sha512\nfake:int\nfake:int16\nfake:int32\nfake:int64\nfake:int8\nfake:internet.company_email\nfake:internet.domain\nfake:internet.email\nfake:internet.free_email\nfake:internet.free_email_domain\nfake:internet.http_method\nfake:internet.ipv4\nfake:internet.ipv6\nfake:internet.local_ipv4\nfake:internet.mac_address\nfake:internet.password\nfake:internet.query\nfake:internet.safe_email\nfake:internet.safe_email_domain\nfake:internet.slug\nfake:internet.status_code\nfake:internet.status_code_message\nfake:internet.status_code_with_message\nfake:internet.tld\nfake:internet.url\nfake:internet.user\nfake:language.language\nfake:language.language_abbr\nfake:language.programming_language\nfake:letter\nfake:lorem.word\nfake:mime_type.mime_type\nfake:music.author\nfake:music.genre\nfake:music.length\nfake:music.name\nfake:payment.credit_card_expiration_date_string\nfake:payment.credit_card_number\nfake:payment.credit_card_type\nfake:payment.iban\nfake:person.first_name\nfake:person.first_name_female\nfake:person.first_name_male\nfake:person.gender\nfake:person.gender_female\nfake:person.gender_male\nfake:person.last_name\nfake:person.name\nfake:person.name_and_gender\nfake:person.name_female\nfake:person.name_male\nfake:person.ssn\nfake:person.suffix\nfake:person.title\nfake:person.title_female\nfake:person.title_male\nfake:pet.cat\nfake:pet.dog\nfake:pet.name\nfake:phone.area_code\nfake:phone.e164_number\nfake:phone.exchange_code\nfake:phone.number\nfake:phone.toll_free_area_code\nfake:phone.tool_free_number\nfake:random_digit\nfake:random_digit_not_null\nfake:random_letter\nfake:time.am_pm\nfake:time.century\nfake:time.day_of_month\nfake:time.day_of_week\nfake:time.month\nfake:time.month_name\nfake:time.timezone\nfake:time.year\nfake:u_int\nfake:u_int16\nfake:u_int32\nfake:u_int64\nfake:u_int8\nfake:user_agent.chrome\nfake:user_agent.firefox\nfake:user_agent.internet_explorer\nfake:user_agent.opera\nfake:user_agent.safari\nfake:user_agent.user_agent\nfake:uuid.v4\nfake:you_tube.generate_embeded_url\nfake:you_tube.generate_full_url\nfake:you_tube.generate_share_url\nfake:you_tube.generate_video_id\n</code></pre>"},{"location":"middleware/","title":"Middleware","text":""},{"location":"middleware/#about","title":"About","text":"<p>Middleware are Go functions that can be shipped with Docker image, allowing request and response contents to be modified on the fly.</p>"},{"location":"middleware/#signature","title":"Signature","text":"<p>Same signature for both request and response middleware functions: <pre><code>func (reqResource *connexions_plugin.RequestedResource) ([]byte, error) {\n    // your code here\n}\n</code></pre></p> <p>before request middleware: If middleware returns an error or any non-nil response, the request will be aborted and the response will be returned to the client.</p> <p>Middleware response function: <pre><code>func PetstoreAfter(reqResource *connexions_plugin.RequestedResource) ([]byte, error) {\n    log.Printf(\"[PetstoreAfter] req path: %s\\n\", reqResource.URL.String())\n    switch reqResource.Method {\n    case http.MethodGet:\n        switch reqResource.Resource {\n        case \"/pets\":\n            pets := []map[string]any{\n                {\"name\": \"dog\", \"id\": 1, \"tag\": \"pet\"},\n                {\"name\": \"cat\", \"id\": 2, \"tag\": \"pet\"},\n            }\n            log.Println(\"[PetstoreAfter] returning modified pets\")\n            return json.Marshal(pets)\n        }\n    }\n    return reqResource.Response.Data, nil\n}\n</code></pre></p> <p><code>connexions_plugin</code> package is a small package that provides typing support for the middleware functions. User provided functions should be built as go plugins using same go version as <code>connexions</code>.</p>"},{"location":"middleware/#middleware-location","title":"Middleware location","text":"<p>Functions should be placed in the <code>plugins</code> directory inside the mapped <code>data</code> directory. Filenames are completely arbitrary and can be named as you wish. But the names of the middleware functions should be: - unique - start with UpperCase - specified in the service configuration:</p> <p>Other conditions: - Package name should be <code>main</code>. - Go version should exactly match the version used to build the Connexions image.</p> <pre><code>services:\n  petstore:\n    middleware:\n      beforeHandler:\n        - PetstoreBefore\n      afterHandler:\n        - PetstoreAfter\n</code></pre>"},{"location":"services/","title":"Services","text":""},{"location":"services/#about","title":"About","text":"<p>Services represent collection of resources available under the same first part of the path. In case the path empty, the service name is empty too but in the <code>UI</code> it's seen as <code>/</code> and in the application code: <code>root</code>.</p> <p>Service can contain both OpenAPI resources and fixed resources. Resources considered to be OpenAPI if their schema validates against either OpenAPI v3 or Swagger v2 schema. Fixed is just a file that can be served as is.</p> <p>Resources without file extension should be stored with <code>index.json</code> filename. See File structure for more details.</p> <p>OpenAPI resources can be duplicated. Fixed resources, on the contrary, can't be duplicated.</p> <p>If the same resource is defined in both OpenAPI and fixed resources, the fixed resource will be used. In the <code>UI</code> it's seen as <code>\ud83d\udd01</code> icon near the resource name.</p> <p>Services are stored and served using file system. There are no any database or any other storage. Though in the future, local browser storage can be used to provide better experience.</p>"},{"location":"services/#file-structure","title":"File structure","text":"<p>You can maintain this structure yourself or use <code>UI</code> to create and edit services and resources. At any time you can import or export services and resources using <code>UI</code> or <code>API</code>.</p>"},{"location":"services/#openapi-resources","title":"OpenAPI resources","text":"<pre><code>services\n\u2514\u2500\u2500\u2500openapi\n    \u2514\u2500\u2500\u2500service-1.yml # (1)!\n    \u2514\u2500\u2500\u2500service-2.json # (2)!\n    \u2514\u2500\u2500\u2500service-3\n        \u2514\u2500\u2500\u2500v1\n            \u2514\u2500\u2500\u2500users\n                \u2514\u2500\u2500\u2500index.yml # (3)!\n            \u2514\u2500\u2500\u2500index.json # (4)!\n</code></pre> <ol> <li><code>/*</code> all resources defined in service-1</li> <li><code>/*</code> all resources defined in service-2</li> <li><code>/service-3/v1/users/*</code> all resources defined in service-3</li> <li><code>/service-3/v1/*</code> all resources defined in service-3</li> </ol>"},{"location":"services/#fixed-resources-without-service-name","title":"Fixed resources without service name","text":"<pre><code>services\n\u2514\u2500\u2500\u2500root\n    \u2514\u2500\u2500\u2500get\n        \u2514\u2500\u2500\u2500index.json # (1)!\n    \u2514\u2500\u2500\u2500index.json # (2)!\n    \u2514\u2500\u2500\u2500file.txt # (3)!\n    \u2514\u2500\u2500\u2500patch\n        \u2514\u2500\u2500\u2500service4\n            \u2514\u2500\u2500\u2500v1\n                \u2514\u2500\u2500\u2500users\n                    \u2514\u2500\u2500\u2500index.json # (4)!\n                \u2514\u2500\u2500\u2500me.json # (5)!\n</code></pre> <ol> <li><code>GET /</code></li> <li><code>GET /</code> (will overwrite the 1st one under <code>get</code>)</li> <li><code>GET /file.txt</code></li> <li><code>PATCH /service-4/v1/users</code></li> <li><code>PATCH /service-4/v1/me.json</code> (same as 4)</li> </ol>"},{"location":"services/#fixed-resources-with-service-names","title":"Fixed resources with service names","text":"<pre><code>services\n\u2514\u2500\u2500\u2500service5\n    \u2514\u2500\u2500\u2500delete\n        \u2514\u2500\u2500\u2500users\n            \u2514\u2500\u2500\u2500{user-id}\n                \u2514\u2500\u2500\u2500index.json # (1)!\n    \u2514\u2500\u2500\u2500get\n        \u2514\u2500\u2500\u2500users\n            \u2514\u2500\u2500\u2500index.json # (2)!\n        \u2514\u2500\u2500\u2500file.txt # (3)!\n    \u2514\u2500\u2500\u2500file-2.txt # (4)!\n</code></pre> <ol> <li><code>DELETE /service-5/users/{user-id}</code></li> <li><code>GET /service-5/users</code></li> <li><code>GET /service-5/file.txt</code></li> <li><code>GET /service-5/file-2.txt</code></li> </ol>"},{"location":"settings/","title":"Settings","text":"<p>Add <code>yaml-language-server</code> to the top of the file to enable JSON Schema support for your configuration settings. <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/cubahno/connexions/refs/heads/master/resources/json-schema.json\napp:\n  port: 2200\n  disableUI: true\n# ...\n</code></pre></p> Complete example <pre><code>app:\n  port: 2200\n  homeUrl: /.ui\n  serviceUrl: /.services\n  contextUrl: /.contexts\n  settingsUrl: /.settings\n  serveUI: true\n  serveSpec: true\n  contextAreaPrefix: in-\n  schemaProvider: libopenapi\n  createFileStructure: true\n  editor:\n    theme: chrome\n    fontSize: 12\n  historyDuration: 5m\n\nservices:\n  petstore:\n    latencies:\n      p25: 10ms\n      p99: 20ms\n      p100: 25ms\n\n    errors:\n      p10: 400\n      p20: 500\n\n    contexts:\n    - common:\n    - fake: pet\n    - fake: gamer\n\n    parseConfig:\n      maxLevels: 6\n      maxRecursionLevels: 2\n\n    validate:\n      request: true\n      response: false\n\n    cache:\n      schema: true\n      getRequests: true\n</code></pre> <p>Non-configurable values</p> <p>This document provides a complete list of all configurable settings. However, there are more values that can be set, but only when using <code>connexions</code> as library.</p>"}]}
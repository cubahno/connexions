name: CI

on:
  push:
    branches: 'master'
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches: '**'
    paths-ignore:
      - 'docs/**'

permissions: read-all

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.3"
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.61.0
          args: --timeout 10m

  linter-openapi:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Lint OpenAPI spec
        uses: github/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_OPENAPI: true
          FILTER_REGEX_INCLUDE: resources/openapi.yaml

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: "1.23.3"

    - name: Build
      run: go build -v ./...

    - run: go mod download && go mod tidy && go mod verify
    - run: git --no-pager diff --exit-code

    - run: go vet ./...
    - run: git --no-pager diff --exit-code

    - run: go fmt ./...
    - run: git --no-pager diff --exit-code

    - name: Unit tests
      id: test_step
      run: |
        make test-with-check-coverage
        total=$(go tool cover -func=coverage.out | awk '/^total:/{printf "%d", $3}' | tr -d '%')
        echo "TOTAL_COVERAGE=$total" >> $GITHUB_ENV
        echo "::set-output name=total_coverage::$total"

    - name: Integration Tests
      run: |
        make test-integration

    outputs:
      total_coverage: ${{ steps.test_step.outputs.total_coverage }}

  generate_badge:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Debug Environment Variables
        run: |
          echo "TOTAL_COVERAGE: ${{ needs.test.outputs.total_coverage }}"
          echo "Token length: ${#GIST_WRITER}"
        env:
          GIST_WRITER: ${{ secrets.GIST_WRITER }}

      - name: "Make coverage badge"
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_WRITER }}
          gistID: 4110782af3ec09dd1ebabc3304756f1f
          filename: covbadge.json
          label: Coverage
          message: ${{ needs.test.outputs.total_coverage }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ needs.test.outputs.total_coverage }}
        env:
          ACTIONS_STEP_DEBUG: true
